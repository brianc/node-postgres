{"/home/raziel/ForkedProjects/node-postgres/packages/pg-protocol/src/index.ts":{"path":"/home/raziel/ForkedProjects/node-postgres/packages/pg-protocol/src/index.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":67}},"2":{"start":{"line":4,"column":19},"end":{"line":4,"column":40}},"3":{"start":{"line":5,"column":0},"end":{"line":5,"column":125}},"4":{"start":{"line":5,"column":87},"end":{"line":5,"column":119}},"5":{"start":{"line":6,"column":21},"end":{"line":6,"column":44}},"6":{"start":{"line":7,"column":0},"end":{"line":7,"column":119}},"7":{"start":{"line":7,"column":83},"end":{"line":7,"column":113}},"8":{"start":{"line":8,"column":17},"end":{"line":8,"column":36}},"9":{"start":{"line":10,"column":19},"end":{"line":10,"column":40}},"10":{"start":{"line":11,"column":4},"end":{"line":11,"column":66}},"11":{"start":{"line":11,"column":34},"end":{"line":11,"column":64}},"12":{"start":{"line":12,"column":4},"end":{"line":12,"column":71}},"13":{"start":{"line":12,"column":36},"end":{"line":12,"column":69}},"14":{"start":{"line":12,"column":59},"end":{"line":12,"column":68}},"15":{"start":{"line":14,"column":0},"end":{"line":14,"column":22}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":73},"end":{"line":5,"column":74}},"loc":{"start":{"line":5,"column":85},"end":{"line":5,"column":121}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":7,"column":69},"end":{"line":7,"column":70}},"loc":{"start":{"line":7,"column":81},"end":{"line":7,"column":115}},"line":7},"2":{"name":"parse","decl":{"start":{"line":9,"column":9},"end":{"line":9,"column":14}},"loc":{"start":{"line":9,"column":33},"end":{"line":13,"column":1}},"line":9},"3":{"name":"(anonymous_3)","decl":{"start":{"line":11,"column":22},"end":{"line":11,"column":23}},"loc":{"start":{"line":11,"column":34},"end":{"line":11,"column":64}},"line":11},"4":{"name":"(anonymous_4)","decl":{"start":{"line":12,"column":23},"end":{"line":12,"column":24}},"loc":{"start":{"line":12,"column":36},"end":{"line":12,"column":69}},"line":12},"5":{"name":"(anonymous_5)","decl":{"start":{"line":12,"column":53},"end":{"line":12,"column":54}},"loc":{"start":{"line":12,"column":59},"end":{"line":12,"column":68}},"line":12}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":0,"5":1,"6":1,"7":0,"8":1,"9":48,"10":48,"11":54,"12":48,"13":48,"14":48,"15":1},"f":{"0":0,"1":0,"2":48,"3":54,"4":48,"5":48},"b":{},"inputSourceMap":{"version":3,"file":"/home/raziel/ForkedProjects/node-postgres/packages/pg-protocol/src/index.ts","sources":["/home/raziel/ForkedProjects/node-postgres/packages/pg-protocol/src/index.ts"],"names":[],"mappings":";;;AAAA,yCAA0C;AAUtB,8FAVX,wBAAa,OAUW;AATjC,6CAAwC;AAS/B,0FATA,sBAAS,OASA;AARlB,qCAAkD;AAElD,SAAgB,KAAK,CAAC,MAA6B,EAAE,QAAyB;IAC5E,MAAM,MAAM,GAAG,IAAI,eAAM,EAAE,CAAA;IAC3B,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,MAAc,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAA;IACrE,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC,CAAA;AACpE,CAAC;AAJD,sBAIC","sourcesContent":["import { DatabaseError } from './messages'\nimport { serialize } from './serializer'\nimport { Parser, MessageCallback } from './parser'\n\nexport function parse(stream: NodeJS.ReadableStream, callback: MessageCallback): Promise<void> {\n  const parser = new Parser()\n  stream.on('data', (buffer: Buffer) => parser.parse(buffer, callback))\n  return new Promise((resolve) => stream.on('end', () => resolve()))\n}\n\nexport { serialize, DatabaseError }\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"cc8d09db1101e825e7c871fcb5f3c8c7ffe8a870","contentHash":"777dd81866ea10a04e41f3e2f05d4284c4ea1e39fc06fdf8034ed9233f8fff19"},"/home/raziel/ForkedProjects/node-postgres/packages/pg-protocol/src/messages.ts":{"path":"/home/raziel/ForkedProjects/node-postgres/packages/pg-protocol/src/messages.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":561}},"2":{"start":{"line":4,"column":0},"end":{"line":7,"column":2}},"3":{"start":{"line":8,"column":0},"end":{"line":11,"column":2}},"4":{"start":{"line":12,"column":0},"end":{"line":15,"column":2}},"5":{"start":{"line":16,"column":0},"end":{"line":19,"column":2}},"6":{"start":{"line":20,"column":0},"end":{"line":23,"column":2}},"7":{"start":{"line":24,"column":0},"end":{"line":27,"column":2}},"8":{"start":{"line":28,"column":0},"end":{"line":31,"column":2}},"9":{"start":{"line":32,"column":0},"end":{"line":35,"column":2}},"10":{"start":{"line":38,"column":8},"end":{"line":38,"column":23}},"11":{"start":{"line":39,"column":8},"end":{"line":39,"column":29}},"12":{"start":{"line":40,"column":8},"end":{"line":40,"column":25}},"13":{"start":{"line":43,"column":0},"end":{"line":43,"column":38}},"14":{"start":{"line":46,"column":8},"end":{"line":46,"column":29}},"15":{"start":{"line":47,"column":8},"end":{"line":47,"column":27}},"16":{"start":{"line":48,"column":8},"end":{"line":48,"column":46}},"17":{"start":{"line":51,"column":0},"end":{"line":51,"column":42}},"18":{"start":{"line":54,"column":8},"end":{"line":54,"column":29}},"19":{"start":{"line":55,"column":8},"end":{"line":55,"column":25}},"20":{"start":{"line":56,"column":8},"end":{"line":56,"column":29}},"21":{"start":{"line":57,"column":8},"end":{"line":57,"column":50}},"22":{"start":{"line":60,"column":0},"end":{"line":60,"column":36}},"23":{"start":{"line":63,"column":8},"end":{"line":63,"column":25}},"24":{"start":{"line":64,"column":8},"end":{"line":64,"column":31}},"25":{"start":{"line":65,"column":8},"end":{"line":65,"column":33}},"26":{"start":{"line":66,"column":8},"end":{"line":66,"column":37}},"27":{"start":{"line":67,"column":8},"end":{"line":67,"column":41}},"28":{"start":{"line":68,"column":8},"end":{"line":68,"column":49}},"29":{"start":{"line":69,"column":8},"end":{"line":69,"column":29}},"30":{"start":{"line":72,"column":0},"end":{"line":72,"column":22}},"31":{"start":{"line":75,"column":8},"end":{"line":75,"column":29}},"32":{"start":{"line":76,"column":8},"end":{"line":76,"column":37}},"33":{"start":{"line":77,"column":8},"end":{"line":77,"column":58}},"34":{"start":{"line":78,"column":8},"end":{"line":78,"column":49}},"35":{"start":{"line":81,"column":0},"end":{"line":81,"column":54}},"36":{"start":{"line":84,"column":8},"end":{"line":84,"column":29}},"37":{"start":{"line":85,"column":8},"end":{"line":85,"column":43}},"38":{"start":{"line":86,"column":8},"end":{"line":86,"column":45}},"39":{"start":{"line":87,"column":8},"end":{"line":87,"column":60}},"40":{"start":{"line":90,"column":0},"end":{"line":90,"column":56}},"41":{"start":{"line":93,"column":8},"end":{"line":93,"column":29}},"42":{"start":{"line":94,"column":8},"end":{"line":94,"column":25}},"43":{"start":{"line":95,"column":8},"end":{"line":95,"column":80}},"44":{"start":{"line":98,"column":0},"end":{"line":98,"column":62}},"45":{"start":{"line":101,"column":8},"end":{"line":101,"column":29}},"46":{"start":{"line":102,"column":8},"end":{"line":102,"column":35}},"47":{"start":{"line":103,"column":8},"end":{"line":103,"column":35}},"48":{"start":{"line":104,"column":8},"end":{"line":104,"column":58}},"49":{"start":{"line":107,"column":0},"end":{"line":107,"column":54}},"50":{"start":{"line":110,"column":8},"end":{"line":110,"column":29}},"51":{"start":{"line":111,"column":8},"end":{"line":111,"column":35}},"52":{"start":{"line":112,"column":8},"end":{"line":112,"column":31}},"53":{"start":{"line":113,"column":8},"end":{"line":113,"column":31}},"54":{"start":{"line":114,"column":8},"end":{"line":114,"column":54}},"55":{"start":{"line":117,"column":0},"end":{"line":117,"column":66}},"56":{"start":{"line":120,"column":8},"end":{"line":120,"column":29}},"57":{"start":{"line":121,"column":8},"end":{"line":121,"column":29}},"58":{"start":{"line":122,"column":8},"end":{"line":122,"column":56}},"59":{"start":{"line":125,"column":0},"end":{"line":125,"column":52}},"60":{"start":{"line":128,"column":8},"end":{"line":128,"column":29}},"61":{"start":{"line":129,"column":8},"end":{"line":129,"column":25}},"62":{"start":{"line":130,"column":8},"end":{"line":130,"column":60}},"63":{"start":{"line":133,"column":0},"end":{"line":133,"column":56}},"64":{"start":{"line":136,"column":8},"end":{"line":136,"column":29}},"65":{"start":{"line":137,"column":8},"end":{"line":137,"column":29}},"66":{"start":{"line":138,"column":8},"end":{"line":138,"column":44}},"67":{"start":{"line":139,"column":8},"end":{"line":139,"column":40}},"68":{"start":{"line":142,"column":0},"end":{"line":142,"column":40}},"69":{"start":{"line":145,"column":8},"end":{"line":145,"column":29}},"70":{"start":{"line":146,"column":8},"end":{"line":146,"column":31}},"71":{"start":{"line":147,"column":8},"end":{"line":147,"column":42}},"72":{"start":{"line":150,"column":0},"end":{"line":150,"column":38}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":37,"column":4},"end":{"line":37,"column":5}},"loc":{"start":{"line":37,"column":39},"end":{"line":41,"column":5}},"line":37},"1":{"name":"(anonymous_1)","decl":{"start":{"line":45,"column":4},"end":{"line":45,"column":5}},"loc":{"start":{"line":45,"column":31},"end":{"line":49,"column":5}},"line":45},"2":{"name":"(anonymous_2)","decl":{"start":{"line":53,"column":4},"end":{"line":53,"column":5}},"loc":{"start":{"line":53,"column":51},"end":{"line":58,"column":5}},"line":53},"3":{"name":"(anonymous_3)","decl":{"start":{"line":62,"column":4},"end":{"line":62,"column":5}},"loc":{"start":{"line":62,"column":93},"end":{"line":70,"column":5}},"line":62},"4":{"name":"(anonymous_4)","decl":{"start":{"line":74,"column":4},"end":{"line":74,"column":5}},"loc":{"start":{"line":74,"column":36},"end":{"line":79,"column":5}},"line":74},"5":{"name":"(anonymous_5)","decl":{"start":{"line":83,"column":4},"end":{"line":83,"column":5}},"loc":{"start":{"line":83,"column":55},"end":{"line":88,"column":5}},"line":83},"6":{"name":"(anonymous_6)","decl":{"start":{"line":92,"column":4},"end":{"line":92,"column":5}},"loc":{"start":{"line":92,"column":30},"end":{"line":96,"column":5}},"line":92},"7":{"name":"(anonymous_7)","decl":{"start":{"line":100,"column":4},"end":{"line":100,"column":5}},"loc":{"start":{"line":100,"column":46},"end":{"line":105,"column":5}},"line":100},"8":{"name":"(anonymous_8)","decl":{"start":{"line":109,"column":4},"end":{"line":109,"column":5}},"loc":{"start":{"line":109,"column":53},"end":{"line":115,"column":5}},"line":109},"9":{"name":"(anonymous_9)","decl":{"start":{"line":119,"column":4},"end":{"line":119,"column":5}},"loc":{"start":{"line":119,"column":32},"end":{"line":123,"column":5}},"line":119},"10":{"name":"(anonymous_10)","decl":{"start":{"line":127,"column":4},"end":{"line":127,"column":5}},"loc":{"start":{"line":127,"column":30},"end":{"line":131,"column":5}},"line":127},"11":{"name":"(anonymous_11)","decl":{"start":{"line":135,"column":4},"end":{"line":135,"column":5}},"loc":{"start":{"line":135,"column":32},"end":{"line":140,"column":5}},"line":135},"12":{"name":"(anonymous_12)","decl":{"start":{"line":144,"column":4},"end":{"line":144,"column":5}},"loc":{"start":{"line":144,"column":33},"end":{"line":148,"column":5}},"line":144}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1,"17":1,"18":4,"19":4,"20":4,"21":4,"22":1,"23":3,"24":3,"25":3,"26":3,"27":3,"28":3,"29":3,"30":1,"31":3,"32":3,"33":3,"34":3,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":8,"57":8,"58":8,"59":1,"60":1,"61":1,"62":1,"63":1,"64":15,"65":15,"66":15,"67":15,"68":1,"69":1,"70":1,"71":1,"72":1},"f":{"0":2,"1":1,"2":4,"3":3,"4":3,"5":1,"6":1,"7":1,"8":1,"9":8,"10":1,"11":15,"12":1},"b":{},"inputSourceMap":{"version":3,"file":"/home/raziel/ForkedProjects/node-postgres/packages/pg-protocol/src/messages.ts","sources":["/home/raziel/ForkedProjects/node-postgres/packages/pg-protocol/src/messages.ts"],"names":[],"mappings":"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","sourcesContent":["export type Mode = 'text' | 'binary'\n\nexport const enum MessageName {\n  parseComplete = 'parseComplete',\n  bindComplete = 'bindComplete',\n  closeComplete = 'closeComplete',\n  noData = 'noData',\n  portalSuspended = 'portalSuspended',\n  replicationStart = 'replicationStart',\n  emptyQuery = 'emptyQuery',\n  copyDone = 'copyDone',\n  copyData = 'copyData',\n  rowDescription = 'rowDescription',\n  parameterStatus = 'parameterStatus',\n  backendKeyData = 'backendKeyData',\n  notification = 'notification',\n  readyForQuery = 'readyForQuery',\n  commandComplete = 'commandComplete',\n  dataRow = 'dataRow',\n  copyInResponse = 'copyInResponse',\n  copyOutResponse = 'copyOutResponse',\n  authenticationOk = 'authenticationOk',\n  authenticationMD5Password = 'authenticationMD5Password',\n  authenticationCleartextPassword = 'authenticationCleartextPassword',\n  authenticationSASL = 'authenticationSASL',\n  authenticationSASLContinue = 'authenticationSASLContinue',\n  authenticationSASLFinal = 'authenticationSASLFinal',\n  error = 'error',\n  notice = 'notice',\n}\n\nexport interface BackendMessage {\n  name: MessageName\n  length: number\n}\n\nexport const parseComplete: BackendMessage = {\n  name: MessageName.parseComplete,\n  length: 5,\n}\n\nexport const bindComplete: BackendMessage = {\n  name: MessageName.bindComplete,\n  length: 5,\n}\n\nexport const closeComplete: BackendMessage = {\n  name: MessageName.closeComplete,\n  length: 5,\n}\n\nexport const noData: BackendMessage = {\n  name: MessageName.noData,\n  length: 5,\n}\n\nexport const portalSuspended: BackendMessage = {\n  name: MessageName.portalSuspended,\n  length: 5,\n}\n\nexport const replicationStart: BackendMessage = {\n  name: MessageName.replicationStart,\n  length: 4,\n}\n\nexport const emptyQuery: BackendMessage = {\n  name: MessageName.emptyQuery,\n  length: 4,\n}\n\nexport const copyDone: BackendMessage = {\n  name: MessageName.copyDone,\n  length: 4,\n}\n\ninterface NoticeOrError {\n  message: string | undefined\n  severity: string | undefined\n  code: string | undefined\n  detail: string | undefined\n  hint: string | undefined\n  position: string | undefined\n  internalPosition: string | undefined\n  internalQuery: string | undefined\n  where: string | undefined\n  schema: string | undefined\n  table: string | undefined\n  column: string | undefined\n  dataType: string | undefined\n  constraint: string | undefined\n  file: string | undefined\n  line: string | undefined\n  routine: string | undefined\n}\n\nexport class DatabaseError extends Error implements NoticeOrError {\n  public severity: string | undefined\n  public code: string | undefined\n  public detail: string | undefined\n  public hint: string | undefined\n  public position: string | undefined\n  public internalPosition: string | undefined\n  public internalQuery: string | undefined\n  public where: string | undefined\n  public schema: string | undefined\n  public table: string | undefined\n  public column: string | undefined\n  public dataType: string | undefined\n  public constraint: string | undefined\n  public file: string | undefined\n  public line: string | undefined\n  public routine: string | undefined\n  constructor(message: string, public readonly length: number, public readonly name: MessageName) {\n    super(message)\n  }\n}\n\nexport class CopyDataMessage {\n  public readonly name = MessageName.copyData\n  constructor(public readonly length: number, public readonly chunk: Buffer) {}\n}\n\nexport class CopyResponse {\n  public readonly columnTypes: number[]\n  constructor(\n    public readonly length: number,\n    public readonly name: MessageName,\n    public readonly binary: boolean,\n    columnCount: number\n  ) {\n    this.columnTypes = new Array(columnCount)\n  }\n}\n\nexport class Field {\n  constructor(\n    public readonly name: string,\n    public readonly tableID: number,\n    public readonly columnID: number,\n    public readonly dataTypeID: number,\n    public readonly dataTypeSize: number,\n    public readonly dataTypeModifier: number,\n    public readonly format: Mode\n  ) {}\n}\n\nexport class RowDescriptionMessage {\n  public readonly name: MessageName = MessageName.rowDescription\n  public readonly fields: Field[]\n  constructor(public readonly length: number, public readonly fieldCount: number) {\n    this.fields = new Array(this.fieldCount)\n  }\n}\n\nexport class ParameterStatusMessage {\n  public readonly name: MessageName = MessageName.parameterStatus\n  constructor(\n    public readonly length: number,\n    public readonly parameterName: string,\n    public readonly parameterValue: string\n  ) {}\n}\n\nexport class AuthenticationMD5Password implements BackendMessage {\n  public readonly name: MessageName = MessageName.authenticationMD5Password\n  constructor(public readonly length: number, public readonly salt: Buffer) {}\n}\n\nexport class BackendKeyDataMessage {\n  public readonly name: MessageName = MessageName.backendKeyData\n  constructor(public readonly length: number, public readonly processID: number, public readonly secretKey: number) {}\n}\n\nexport class NotificationResponseMessage {\n  public readonly name: MessageName = MessageName.notification\n  constructor(\n    public readonly length: number,\n    public readonly processId: number,\n    public readonly channel: string,\n    public readonly payload: string\n  ) {}\n}\n\nexport class ReadyForQueryMessage {\n  public readonly name: MessageName = MessageName.readyForQuery\n  constructor(public readonly length: number, public readonly status: string) {}\n}\n\nexport class CommandCompleteMessage {\n  public readonly name: MessageName = MessageName.commandComplete\n  constructor(public readonly length: number, public readonly text: string) {}\n}\n\nexport class DataRowMessage {\n  public readonly fieldCount: number\n  public readonly name: MessageName = MessageName.dataRow\n  constructor(public length: number, public fields: any[]) {\n    this.fieldCount = fields.length\n  }\n}\n\nexport class NoticeMessage implements BackendMessage, NoticeOrError {\n  constructor(public readonly length: number, public readonly message: string | undefined) {}\n  public readonly name = MessageName.notice\n  public severity: string | undefined\n  public code: string | undefined\n  public detail: string | undefined\n  public hint: string | undefined\n  public position: string | undefined\n  public internalPosition: string | undefined\n  public internalQuery: string | undefined\n  public where: string | undefined\n  public schema: string | undefined\n  public table: string | undefined\n  public column: string | undefined\n  public dataType: string | undefined\n  public constraint: string | undefined\n  public file: string | undefined\n  public line: string | undefined\n  public routine: string | undefined\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"09c62e28ccb949a2f3b2d5ede1a0d0b89580948b","contentHash":"0a0cb621f3cfc50d51460347e665d4781dca76bcb76c0a82d486595a24598fd7"},"/home/raziel/ForkedProjects/node-postgres/packages/pg-protocol/src/serializer.ts":{"path":"/home/raziel/ForkedProjects/node-postgres/packages/pg-protocol/src/serializer.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":4,"column":24},"end":{"line":4,"column":50}},"3":{"start":{"line":5,"column":15},"end":{"line":5,"column":43}},"4":{"start":{"line":6,"column":16},"end":{"line":17,"column":1}},"5":{"start":{"line":8,"column":4},"end":{"line":8,"column":35}},"6":{"start":{"line":9,"column":4},"end":{"line":11,"column":5}},"7":{"start":{"line":10,"column":8},"end":{"line":10,"column":53}},"8":{"start":{"line":12,"column":4},"end":{"line":12,"column":60}},"9":{"start":{"line":13,"column":21},"end":{"line":13,"column":50}},"10":{"start":{"line":15,"column":17},"end":{"line":15,"column":38}},"11":{"start":{"line":16,"column":4},"end":{"line":16,"column":81}},"12":{"start":{"line":18,"column":19},"end":{"line":23,"column":1}},"13":{"start":{"line":19,"column":21},"end":{"line":19,"column":42}},"14":{"start":{"line":20,"column":4},"end":{"line":20,"column":32}},"15":{"start":{"line":21,"column":4},"end":{"line":21,"column":39}},"16":{"start":{"line":22,"column":4},"end":{"line":22,"column":20}},"17":{"start":{"line":24,"column":17},"end":{"line":26,"column":1}},"18":{"start":{"line":25,"column":4},"end":{"line":25,"column":64}},"19":{"start":{"line":27,"column":39},"end":{"line":31,"column":1}},"20":{"start":{"line":29,"column":4},"end":{"line":29,"column":105}},"21":{"start":{"line":30,"column":4},"end":{"line":30,"column":43}},"22":{"start":{"line":32,"column":36},"end":{"line":34,"column":1}},"23":{"start":{"line":33,"column":4},"end":{"line":33,"column":69}},"24":{"start":{"line":35,"column":14},"end":{"line":37,"column":1}},"25":{"start":{"line":36,"column":4},"end":{"line":36,"column":57}},"26":{"start":{"line":38,"column":19},"end":{"line":38,"column":21}},"27":{"start":{"line":39,"column":14},"end":{"line":63,"column":1}},"28":{"start":{"line":45,"column":17},"end":{"line":45,"column":33}},"29":{"start":{"line":46,"column":4},"end":{"line":52,"column":5}},"30":{"start":{"line":48,"column":8},"end":{"line":48,"column":88}},"31":{"start":{"line":49,"column":8},"end":{"line":49,"column":65}},"32":{"start":{"line":50,"column":8},"end":{"line":50,"column":86}},"33":{"start":{"line":53,"column":18},"end":{"line":53,"column":43}},"34":{"start":{"line":54,"column":14},"end":{"line":54,"column":26}},"35":{"start":{"line":55,"column":17},"end":{"line":58,"column":22}},"36":{"start":{"line":59,"column":4},"end":{"line":61,"column":5}},"37":{"start":{"line":59,"column":17},"end":{"line":59,"column":18}},"38":{"start":{"line":60,"column":8},"end":{"line":60,"column":34}},"39":{"start":{"line":62,"column":4},"end":{"line":62,"column":40}},"40":{"start":{"line":64,"column":20},"end":{"line":64,"column":48}},"41":{"start":{"line":65,"column":20},"end":{"line":88,"column":1}},"42":{"start":{"line":66,"column":4},"end":{"line":87,"column":5}},"43":{"start":{"line":66,"column":17},"end":{"line":66,"column":18}},"44":{"start":{"line":67,"column":26},"end":{"line":67,"column":77}},"45":{"start":{"line":68,"column":8},"end":{"line":86,"column":9}},"46":{"start":{"line":70,"column":12},"end":{"line":70,"column":44}},"47":{"start":{"line":72,"column":12},"end":{"line":72,"column":37}},"48":{"start":{"line":74,"column":13},"end":{"line":86,"column":9}},"49":{"start":{"line":76,"column":12},"end":{"line":76,"column":44}},"50":{"start":{"line":78,"column":12},"end":{"line":78,"column":51}},"51":{"start":{"line":79,"column":12},"end":{"line":79,"column":39}},"52":{"start":{"line":83,"column":12},"end":{"line":83,"column":44}},"53":{"start":{"line":84,"column":12},"end":{"line":84,"column":63}},"54":{"start":{"line":85,"column":12},"end":{"line":85,"column":45}},"55":{"start":{"line":89,"column":13},"end":{"line":104,"column":1}},"56":{"start":{"line":91,"column":19},"end":{"line":91,"column":38}},"57":{"start":{"line":92,"column":22},"end":{"line":92,"column":44}},"58":{"start":{"line":93,"column":19},"end":{"line":93,"column":41}},"59":{"start":{"line":94,"column":19},"end":{"line":94,"column":46}},"60":{"start":{"line":95,"column":16},"end":{"line":95,"column":29}},"61":{"start":{"line":96,"column":4},"end":{"line":96,"column":52}},"62":{"start":{"line":97,"column":4},"end":{"line":97,"column":25}},"63":{"start":{"line":98,"column":4},"end":{"line":98,"column":44}},"64":{"start":{"line":99,"column":4},"end":{"line":99,"column":25}},"65":{"start":{"line":100,"column":4},"end":{"line":100,"column":36}},"66":{"start":{"line":102,"column":4},"end":{"line":102,"column":62}},"67":{"start":{"line":103,"column":4},"end":{"line":103,"column":39}},"68":{"start":{"line":105,"column":21},"end":{"line":105,"column":106}},"69":{"start":{"line":106,"column":16},"end":{"line":123,"column":1}},"70":{"start":{"line":108,"column":4},"end":{"line":110,"column":5}},"71":{"start":{"line":109,"column":8},"end":{"line":109,"column":28}},"72":{"start":{"line":111,"column":19},"end":{"line":111,"column":38}},"73":{"start":{"line":112,"column":17},"end":{"line":112,"column":33}},"74":{"start":{"line":113,"column":25},"end":{"line":113,"column":50}},"75":{"start":{"line":114,"column":16},"end":{"line":114,"column":40}},"76":{"start":{"line":116,"column":17},"end":{"line":116,"column":44}},"77":{"start":{"line":117,"column":4},"end":{"line":117,"column":31}},"78":{"start":{"line":118,"column":4},"end":{"line":118,"column":30}},"79":{"start":{"line":119,"column":4},"end":{"line":119,"column":35}},"80":{"start":{"line":120,"column":4},"end":{"line":120,"column":31}},"81":{"start":{"line":121,"column":4},"end":{"line":121,"column":46}},"82":{"start":{"line":122,"column":4},"end":{"line":122,"column":16}},"83":{"start":{"line":124,"column":15},"end":{"line":132,"column":1}},"84":{"start":{"line":125,"column":19},"end":{"line":125,"column":41}},"85":{"start":{"line":126,"column":4},"end":{"line":126,"column":31}},"86":{"start":{"line":127,"column":4},"end":{"line":127,"column":33}},"87":{"start":{"line":128,"column":4},"end":{"line":128,"column":33}},"88":{"start":{"line":129,"column":4},"end":{"line":129,"column":38}},"89":{"start":{"line":130,"column":4},"end":{"line":130,"column":39}},"90":{"start":{"line":131,"column":4},"end":{"line":131,"column":18}},"91":{"start":{"line":133,"column":23},"end":{"line":143,"column":1}},"92":{"start":{"line":134,"column":22},"end":{"line":134,"column":47}},"93":{"start":{"line":135,"column":16},"end":{"line":135,"column":33}},"94":{"start":{"line":137,"column":19},"end":{"line":137,"column":46}},"95":{"start":{"line":138,"column":4},"end":{"line":138,"column":21}},"96":{"start":{"line":139,"column":4},"end":{"line":139,"column":32}},"97":{"start":{"line":140,"column":4},"end":{"line":140,"column":37}},"98":{"start":{"line":141,"column":4},"end":{"line":141,"column":20}},"99":{"start":{"line":142,"column":4},"end":{"line":142,"column":18}},"100":{"start":{"line":144,"column":28},"end":{"line":144,"column":75}},"101":{"start":{"line":145,"column":31},"end":{"line":145,"column":78}},"102":{"start":{"line":146,"column":17},"end":{"line":152,"column":1}},"103":{"start":{"line":147,"column":4},"end":{"line":151,"column":37}},"104":{"start":{"line":153,"column":14},"end":{"line":156,"column":1}},"105":{"start":{"line":154,"column":17},"end":{"line":154,"column":47}},"106":{"start":{"line":155,"column":4},"end":{"line":155,"column":48}},"107":{"start":{"line":157,"column":17},"end":{"line":159,"column":1}},"108":{"start":{"line":158,"column":4},"end":{"line":158,"column":60}},"109":{"start":{"line":160,"column":17},"end":{"line":162,"column":1}},"110":{"start":{"line":161,"column":4},"end":{"line":161,"column":55}},"111":{"start":{"line":163,"column":23},"end":{"line":163,"column":76}},"112":{"start":{"line":163,"column":33},"end":{"line":163,"column":76}},"113":{"start":{"line":164,"column":20},"end":{"line":164,"column":50}},"114":{"start":{"line":165,"column":19},"end":{"line":165,"column":48}},"115":{"start":{"line":166,"column":18},"end":{"line":166,"column":46}},"116":{"start":{"line":167,"column":23},"end":{"line":167,"column":56}},"117":{"start":{"line":168,"column":18},"end":{"line":187,"column":1}},"118":{"start":{"line":180,"column":17},"end":{"line":180,"column":28}},"119":{"start":{"line":181,"column":16},"end":{"line":181,"column":26}},"120":{"start":{"line":182,"column":15},"end":{"line":182,"column":24}},"121":{"start":{"line":184,"column":20},"end":{"line":184,"column":34}},"122":{"start":{"line":188,"column":0},"end":{"line":188,"column":30}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":16},"end":{"line":6,"column":17}},"loc":{"start":{"line":6,"column":26},"end":{"line":17,"column":1}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":18,"column":19},"end":{"line":18,"column":20}},"loc":{"start":{"line":18,"column":25},"end":{"line":23,"column":1}},"line":18},"2":{"name":"(anonymous_2)","decl":{"start":{"line":24,"column":17},"end":{"line":24,"column":18}},"loc":{"start":{"line":24,"column":31},"end":{"line":26,"column":1}},"line":24},"3":{"name":"(anonymous_3)","decl":{"start":{"line":27,"column":39},"end":{"line":27,"column":40}},"loc":{"start":{"line":27,"column":77},"end":{"line":31,"column":1}},"line":27},"4":{"name":"(anonymous_4)","decl":{"start":{"line":32,"column":36},"end":{"line":32,"column":37}},"loc":{"start":{"line":32,"column":62},"end":{"line":34,"column":1}},"line":32},"5":{"name":"(anonymous_5)","decl":{"start":{"line":35,"column":14},"end":{"line":35,"column":15}},"loc":{"start":{"line":35,"column":24},"end":{"line":37,"column":1}},"line":35},"6":{"name":"(anonymous_6)","decl":{"start":{"line":39,"column":14},"end":{"line":39,"column":15}},"loc":{"start":{"line":39,"column":25},"end":{"line":63,"column":1}},"line":39},"7":{"name":"(anonymous_7)","decl":{"start":{"line":65,"column":20},"end":{"line":65,"column":21}},"loc":{"start":{"line":65,"column":51},"end":{"line":88,"column":1}},"line":65},"8":{"name":"(anonymous_8)","decl":{"start":{"line":89,"column":13},"end":{"line":89,"column":14}},"loc":{"start":{"line":89,"column":30},"end":{"line":104,"column":1}},"line":89},"9":{"name":"(anonymous_9)","decl":{"start":{"line":106,"column":16},"end":{"line":106,"column":17}},"loc":{"start":{"line":106,"column":28},"end":{"line":123,"column":1}},"line":106},"10":{"name":"(anonymous_10)","decl":{"start":{"line":124,"column":15},"end":{"line":124,"column":16}},"loc":{"start":{"line":124,"column":41},"end":{"line":132,"column":1}},"line":124},"11":{"name":"(anonymous_11)","decl":{"start":{"line":133,"column":23},"end":{"line":133,"column":24}},"loc":{"start":{"line":133,"column":41},"end":{"line":143,"column":1}},"line":133},"12":{"name":"(anonymous_12)","decl":{"start":{"line":146,"column":17},"end":{"line":146,"column":18}},"loc":{"start":{"line":146,"column":26},"end":{"line":152,"column":1}},"line":146},"13":{"name":"(anonymous_13)","decl":{"start":{"line":153,"column":14},"end":{"line":153,"column":15}},"loc":{"start":{"line":153,"column":23},"end":{"line":156,"column":1}},"line":153},"14":{"name":"(anonymous_14)","decl":{"start":{"line":157,"column":17},"end":{"line":157,"column":18}},"loc":{"start":{"line":157,"column":28},"end":{"line":159,"column":1}},"line":157},"15":{"name":"(anonymous_15)","decl":{"start":{"line":160,"column":17},"end":{"line":160,"column":18}},"loc":{"start":{"line":160,"column":30},"end":{"line":162,"column":1}},"line":160},"16":{"name":"(anonymous_16)","decl":{"start":{"line":163,"column":23},"end":{"line":163,"column":24}},"loc":{"start":{"line":163,"column":33},"end":{"line":163,"column":76}},"line":163},"17":{"name":"(anonymous_17)","decl":{"start":{"line":180,"column":11},"end":{"line":180,"column":12}},"loc":{"start":{"line":180,"column":17},"end":{"line":180,"column":28}},"line":180},"18":{"name":"(anonymous_18)","decl":{"start":{"line":181,"column":10},"end":{"line":181,"column":11}},"loc":{"start":{"line":181,"column":16},"end":{"line":181,"column":26}},"line":181},"19":{"name":"(anonymous_19)","decl":{"start":{"line":182,"column":9},"end":{"line":182,"column":10}},"loc":{"start":{"line":182,"column":15},"end":{"line":182,"column":24}},"line":182},"20":{"name":"(anonymous_20)","decl":{"start":{"line":184,"column":14},"end":{"line":184,"column":15}},"loc":{"start":{"line":184,"column":20},"end":{"line":184,"column":34}},"line":184}},"branchMap":{"0":{"loc":{"start":{"line":45,"column":17},"end":{"line":45,"column":33}},"type":"binary-expr","locations":[{"start":{"line":45,"column":17},"end":{"line":45,"column":27}},{"start":{"line":45,"column":31},"end":{"line":45,"column":33}}],"line":45},"1":{"loc":{"start":{"line":46,"column":4},"end":{"line":52,"column":5}},"type":"if","locations":[{"start":{"line":46,"column":4},"end":{"line":52,"column":5}},{"start":{"line":46,"column":4},"end":{"line":52,"column":5}}],"line":46},"2":{"loc":{"start":{"line":53,"column":18},"end":{"line":53,"column":43}},"type":"binary-expr","locations":[{"start":{"line":53,"column":18},"end":{"line":53,"column":29}},{"start":{"line":53,"column":33},"end":{"line":53,"column":43}}],"line":53},"3":{"loc":{"start":{"line":67,"column":26},"end":{"line":67,"column":77}},"type":"cond-expr","locations":[{"start":{"line":67,"column":40},"end":{"line":67,"column":65}},{"start":{"line":67,"column":68},"end":{"line":67,"column":77}}],"line":67},"4":{"loc":{"start":{"line":68,"column":8},"end":{"line":86,"column":9}},"type":"if","locations":[{"start":{"line":68,"column":8},"end":{"line":86,"column":9}},{"start":{"line":68,"column":8},"end":{"line":86,"column":9}}],"line":68},"5":{"loc":{"start":{"line":74,"column":13},"end":{"line":86,"column":9}},"type":"if","locations":[{"start":{"line":74,"column":13},"end":{"line":86,"column":9}},{"start":{"line":74,"column":13},"end":{"line":86,"column":9}}],"line":74},"6":{"loc":{"start":{"line":89,"column":14},"end":{"line":89,"column":25}},"type":"default-arg","locations":[{"start":{"line":89,"column":23},"end":{"line":89,"column":25}}],"line":89},"7":{"loc":{"start":{"line":91,"column":19},"end":{"line":91,"column":38}},"type":"binary-expr","locations":[{"start":{"line":91,"column":19},"end":{"line":91,"column":32}},{"start":{"line":91,"column":36},"end":{"line":91,"column":38}}],"line":91},"8":{"loc":{"start":{"line":92,"column":22},"end":{"line":92,"column":44}},"type":"binary-expr","locations":[{"start":{"line":92,"column":22},"end":{"line":92,"column":38}},{"start":{"line":92,"column":42},"end":{"line":92,"column":44}}],"line":92},"9":{"loc":{"start":{"line":93,"column":19},"end":{"line":93,"column":41}},"type":"binary-expr","locations":[{"start":{"line":93,"column":19},"end":{"line":93,"column":32}},{"start":{"line":93,"column":36},"end":{"line":93,"column":41}}],"line":93},"10":{"loc":{"start":{"line":94,"column":19},"end":{"line":94,"column":46}},"type":"binary-expr","locations":[{"start":{"line":94,"column":19},"end":{"line":94,"column":32}},{"start":{"line":94,"column":36},"end":{"line":94,"column":46}}],"line":94},"11":{"loc":{"start":{"line":102,"column":20},"end":{"line":102,"column":47}},"type":"cond-expr","locations":[{"start":{"line":102,"column":29},"end":{"line":102,"column":30}},{"start":{"line":102,"column":46},"end":{"line":102,"column":47}}],"line":102},"12":{"loc":{"start":{"line":108,"column":4},"end":{"line":110,"column":5}},"type":"if","locations":[{"start":{"line":108,"column":4},"end":{"line":110,"column":5}},{"start":{"line":108,"column":4},"end":{"line":110,"column":5}}],"line":108},"13":{"loc":{"start":{"line":108,"column":8},"end":{"line":108,"column":51}},"type":"binary-expr","locations":[{"start":{"line":108,"column":8},"end":{"line":108,"column":15}},{"start":{"line":108,"column":20},"end":{"line":108,"column":34}},{"start":{"line":108,"column":38},"end":{"line":108,"column":50}}],"line":108},"14":{"loc":{"start":{"line":111,"column":19},"end":{"line":111,"column":38}},"type":"binary-expr","locations":[{"start":{"line":111,"column":19},"end":{"line":111,"column":32}},{"start":{"line":111,"column":36},"end":{"line":111,"column":38}}],"line":111},"15":{"loc":{"start":{"line":112,"column":17},"end":{"line":112,"column":33}},"type":"binary-expr","locations":[{"start":{"line":112,"column":17},"end":{"line":112,"column":28}},{"start":{"line":112,"column":32},"end":{"line":112,"column":33}}],"line":112},"16":{"loc":{"start":{"line":147,"column":11},"end":{"line":151,"column":36}},"type":"cond-expr","locations":[{"start":{"line":148,"column":10},"end":{"line":148,"column":75}},{"start":{"line":149,"column":10},"end":{"line":151,"column":36}}],"line":147},"17":{"loc":{"start":{"line":148,"column":58},"end":{"line":148,"column":72}},"type":"binary-expr","locations":[{"start":{"line":148,"column":58},"end":{"line":148,"column":66}},{"start":{"line":148,"column":70},"end":{"line":148,"column":72}}],"line":148},"18":{"loc":{"start":{"line":149,"column":10},"end":{"line":151,"column":36}},"type":"cond-expr","locations":[{"start":{"line":150,"column":14},"end":{"line":150,"column":33}},{"start":{"line":151,"column":14},"end":{"line":151,"column":36}}],"line":149},"19":{"loc":{"start":{"line":154,"column":31},"end":{"line":154,"column":45}},"type":"binary-expr","locations":[{"start":{"line":154,"column":31},"end":{"line":154,"column":39}},{"start":{"line":154,"column":43},"end":{"line":154,"column":45}}],"line":154}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":2,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":3,"29":3,"30":0,"31":0,"32":0,"33":3,"34":3,"35":3,"36":3,"37":3,"38":4,"39":3,"40":1,"41":1,"42":4,"43":4,"44":12,"45":12,"46":6,"47":6,"48":6,"49":1,"50":1,"51":1,"52":5,"53":5,"54":5,"55":1,"56":4,"57":4,"58":4,"59":4,"60":4,"61":4,"62":4,"63":4,"64":4,"65":4,"66":4,"67":4,"68":1,"69":1,"70":2,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":4,"93":4,"94":4,"95":4,"96":4,"97":4,"98":4,"99":4,"100":1,"101":1,"102":1,"103":2,"104":1,"105":2,"106":2,"107":1,"108":1,"109":1,"110":1,"111":1,"112":4,"113":1,"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":3,"7":4,"8":4,"9":2,"10":1,"11":4,"12":2,"13":2,"14":1,"15":1,"16":4,"17":1,"18":1,"19":1,"20":1},"b":{"0":[3,1],"1":[0,3],"2":[3,1],"3":[4,8],"4":[6,6],"5":[1,5],"6":[1],"7":[4,1],"8":[4,1],"9":[4,4],"10":[4,1],"11":[0,4],"12":[1,1],"13":[2,1,0],"14":[1,0],"15":[1,0],"16":[1,1],"17":[1,0],"18":[1,0],"19":[2,1]},"inputSourceMap":{"version":3,"file":"/home/raziel/ForkedProjects/node-postgres/packages/pg-protocol/src/serializer.ts","sources":["/home/raziel/ForkedProjects/node-postgres/packages/pg-protocol/src/serializer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Writer } from './buffer-writer'\n\nconst enum code {\n  startup = 0x70,\n  query = 0x51,\n  parse = 0x50,\n  bind = 0x42,\n  execute = 0x45,\n  flush = 0x48,\n  sync = 0x53,\n  end = 0x58,\n  close = 0x43,\n  describe = 0x44,\n  copyFromChunk = 0x64,\n  copyDone = 0x63,\n  copyFail = 0x66,\n}\n\nconst writer = new Writer()\n\nconst startup = (opts: Record<string, string>): Buffer => {\n  // protocol version\n  writer.addInt16(3).addInt16(0)\n  for (const key of Object.keys(opts)) {\n    writer.addCString(key).addCString(opts[key])\n  }\n\n  writer.addCString('client_encoding').addCString('UTF8')\n\n  var bodyBuffer = writer.addCString('').flush()\n  // this message is sent without a code\n\n  var length = bodyBuffer.length + 4\n\n  return new Writer().addInt32(length).add(bodyBuffer).flush()\n}\n\nconst requestSsl = (): Buffer => {\n  const response = Buffer.allocUnsafe(8)\n  response.writeInt32BE(8, 0)\n  response.writeInt32BE(80877103, 4)\n  return response\n}\n\nconst password = (password: string): Buffer => {\n  return writer.addCString(password).flush(code.startup)\n}\n\nconst sendSASLInitialResponseMessage = function (mechanism: string, initialResponse: string): Buffer {\n  // 0x70 = 'p'\n  writer.addCString(mechanism).addInt32(Buffer.byteLength(initialResponse)).addString(initialResponse)\n\n  return writer.flush(code.startup)\n}\n\nconst sendSCRAMClientFinalMessage = function (additionalData: string): Buffer {\n  return writer.addString(additionalData).flush(code.startup)\n}\n\nconst query = (text: string): Buffer => {\n  return writer.addCString(text).flush(code.query)\n}\n\ntype ParseOpts = {\n  name?: string\n  types?: number[]\n  text: string\n}\n\nconst emptyArray: any[] = []\n\nconst parse = (query: ParseOpts): Buffer => {\n  // expect something like this:\n  // { name: 'queryName',\n  //   text: 'select * from blah',\n  //   types: ['int8', 'bool'] }\n\n  // normalize missing query names to allow for null\n  const name = query.name || ''\n  if (name.length > 63) {\n    /* eslint-disable no-console */\n    console.error('Warning! Postgres only supports 63 characters for query names.')\n    console.error('You supplied %s (%s)', name, name.length)\n    console.error('This can cause conflicts and silent errors executing queries')\n    /* eslint-enable no-console */\n  }\n\n  const types = query.types || emptyArray\n\n  var len = types.length\n\n  var buffer = writer\n    .addCString(name) // name of query\n    .addCString(query.text) // actual query text\n    .addInt16(len)\n\n  for (var i = 0; i < len; i++) {\n    buffer.addInt32(types[i])\n  }\n\n  return writer.flush(code.parse)\n}\n\ntype ValueMapper = (param: any, index: number) => any\n\ntype BindOpts = {\n  portal?: string\n  binary?: boolean\n  statement?: string\n  values?: any[]\n  // optional map from JS value to postgres value per parameter\n  valueMapper?: ValueMapper\n}\n\nconst paramWriter = new Writer()\n\n// make this a const enum so typescript will inline the value\nconst enum ParamType {\n  STRING = 0,\n  BINARY = 1,\n}\n\nconst writeValues = function (values: any[], valueMapper?: ValueMapper): void {\n  for (let i = 0; i < values.length; i++) {\n    const mappedVal = valueMapper ? valueMapper(values[i], i) : values[i]\n    if (mappedVal == null) {\n      // add the param type (string) to the writer\n      writer.addInt16(ParamType.STRING)\n      // write -1 to the param writer to indicate null\n      paramWriter.addInt32(-1)\n    } else if (mappedVal instanceof Buffer) {\n      // add the param type (binary) to the writer\n      writer.addInt16(ParamType.BINARY)\n      // add the buffer to the param writer\n      paramWriter.addInt32(mappedVal.length)\n      paramWriter.add(mappedVal)\n    } else {\n      // add the param type (string) to the writer\n      writer.addInt16(ParamType.STRING)\n      paramWriter.addInt32(Buffer.byteLength(mappedVal))\n      paramWriter.addString(mappedVal)\n    }\n  }\n}\n\nconst bind = (config: BindOpts = {}): Buffer => {\n  // normalize config\n  const portal = config.portal || ''\n  const statement = config.statement || ''\n  const binary = config.binary || false\n  const values = config.values || emptyArray\n  const len = values.length\n\n  writer.addCString(portal).addCString(statement)\n  writer.addInt16(len)\n\n  writeValues(values, config.valueMapper)\n\n  writer.addInt16(len)\n  writer.add(paramWriter.flush())\n\n  // format code\n  writer.addInt16(binary ? ParamType.BINARY : ParamType.STRING)\n  return writer.flush(code.bind)\n}\n\ntype ExecOpts = {\n  portal?: string\n  rows?: number\n}\n\nconst emptyExecute = Buffer.from([code.execute, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00])\n\nconst execute = (config?: ExecOpts): Buffer => {\n  // this is the happy path for most queries\n  if (!config || (!config.portal && !config.rows)) {\n    return emptyExecute\n  }\n\n  const portal = config.portal || ''\n  const rows = config.rows || 0\n\n  const portalLength = Buffer.byteLength(portal)\n  const len = 4 + portalLength + 1 + 4\n  // one extra bit for code\n  const buff = Buffer.allocUnsafe(1 + len)\n  buff[0] = code.execute\n  buff.writeInt32BE(len, 1)\n  buff.write(portal, 5, 'utf-8')\n  buff[portalLength + 5] = 0 // null terminate portal cString\n  buff.writeUInt32BE(rows, buff.length - 4)\n  return buff\n}\n\nconst cancel = (processID: number, secretKey: number): Buffer => {\n  const buffer = Buffer.allocUnsafe(16)\n  buffer.writeInt32BE(16, 0)\n  buffer.writeInt16BE(1234, 4)\n  buffer.writeInt16BE(5678, 6)\n  buffer.writeInt32BE(processID, 8)\n  buffer.writeInt32BE(secretKey, 12)\n  return buffer\n}\n\ntype PortalOpts = {\n  type: 'S' | 'P'\n  name?: string\n}\n\nconst cstringMessage = (code: code, string: string): Buffer => {\n  const stringLen = Buffer.byteLength(string)\n  const len = 4 + stringLen + 1\n  // one extra bit for code\n  const buffer = Buffer.allocUnsafe(1 + len)\n  buffer[0] = code\n  buffer.writeInt32BE(len, 1)\n  buffer.write(string, 5, 'utf-8')\n  buffer[len] = 0 // null terminate cString\n  return buffer\n}\n\nconst emptyDescribePortal = writer.addCString('P').flush(code.describe)\nconst emptyDescribeStatement = writer.addCString('S').flush(code.describe)\n\nconst describe = (msg: PortalOpts): Buffer => {\n  return msg.name\n    ? cstringMessage(code.describe, `${msg.type}${msg.name || ''}`)\n    : msg.type === 'P'\n    ? emptyDescribePortal\n    : emptyDescribeStatement\n}\n\nconst close = (msg: PortalOpts): Buffer => {\n  const text = `${msg.type}${msg.name || ''}`\n  return cstringMessage(code.close, text)\n}\n\nconst copyData = (chunk: Buffer): Buffer => {\n  return writer.add(chunk).flush(code.copyFromChunk)\n}\n\nconst copyFail = (message: string): Buffer => {\n  return cstringMessage(code.copyFail, message)\n}\n\nconst codeOnlyBuffer = (code: code): Buffer => Buffer.from([code, 0x00, 0x00, 0x00, 0x04])\n\nconst flushBuffer = codeOnlyBuffer(code.flush)\nconst syncBuffer = codeOnlyBuffer(code.sync)\nconst endBuffer = codeOnlyBuffer(code.end)\nconst copyDoneBuffer = codeOnlyBuffer(code.copyDone)\n\nconst serialize = {\n  startup,\n  password,\n  requestSsl,\n  sendSASLInitialResponseMessage,\n  sendSCRAMClientFinalMessage,\n  query,\n  parse,\n  bind,\n  execute,\n  describe,\n  close,\n  flush: () => flushBuffer,\n  sync: () => syncBuffer,\n  end: () => endBuffer,\n  copyData,\n  copyDone: () => copyDoneBuffer,\n  copyFail,\n  cancel,\n}\n\nexport { serialize }\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"3d4e6033b0185436a7b69158e9798e6b6e9a7f7a","contentHash":"2bb3963ab5ee2b4bf7150e8e99dbc77e43dd1f1d715ca3aeb19b64ec6fcb550a"},"/home/raziel/ForkedProjects/node-postgres/packages/pg-protocol/src/buffer-writer.ts":{"path":"/home/raziel/ForkedProjects/node-postgres/packages/pg-protocol/src/buffer-writer.ts","statementMap":{"0":{"start":{"line":3,"column":0},"end":{"line":3,"column":62}},"1":{"start":{"line":4,"column":0},"end":{"line":4,"column":24}},"2":{"start":{"line":7,"column":8},"end":{"line":7,"column":25}},"3":{"start":{"line":8,"column":8},"end":{"line":8,"column":24}},"4":{"start":{"line":9,"column":8},"end":{"line":9,"column":32}},"5":{"start":{"line":10,"column":8},"end":{"line":10,"column":47}},"6":{"start":{"line":13,"column":24},"end":{"line":13,"column":56}},"7":{"start":{"line":14,"column":8},"end":{"line":21,"column":9}},"8":{"start":{"line":15,"column":28},"end":{"line":15,"column":39}},"9":{"start":{"line":18,"column":26},"end":{"line":18,"column":75}},"10":{"start":{"line":19,"column":12},"end":{"line":19,"column":54}},"11":{"start":{"line":20,"column":12},"end":{"line":20,"column":40}},"12":{"start":{"line":24,"column":8},"end":{"line":24,"column":23}},"13":{"start":{"line":25,"column":8},"end":{"line":25,"column":57}},"14":{"start":{"line":26,"column":8},"end":{"line":26,"column":57}},"15":{"start":{"line":27,"column":8},"end":{"line":27,"column":56}},"16":{"start":{"line":28,"column":8},"end":{"line":28,"column":56}},"17":{"start":{"line":29,"column":8},"end":{"line":29,"column":20}},"18":{"start":{"line":32,"column":8},"end":{"line":32,"column":23}},"19":{"start":{"line":33,"column":8},"end":{"line":33,"column":56}},"20":{"start":{"line":34,"column":8},"end":{"line":34,"column":56}},"21":{"start":{"line":35,"column":8},"end":{"line":35,"column":20}},"22":{"start":{"line":38,"column":8},"end":{"line":46,"column":9}},"23":{"start":{"line":39,"column":12},"end":{"line":39,"column":27}},"24":{"start":{"line":42,"column":22},"end":{"line":42,"column":47}},"25":{"start":{"line":43,"column":12},"end":{"line":43,"column":33}},"26":{"start":{"line":44,"column":12},"end":{"line":44,"column":60}},"27":{"start":{"line":45,"column":12},"end":{"line":45,"column":31}},"28":{"start":{"line":47,"column":8},"end":{"line":47,"column":39}},"29":{"start":{"line":48,"column":8},"end":{"line":48,"column":20}},"30":{"start":{"line":51,"column":18},"end":{"line":51,"column":43}},"31":{"start":{"line":52,"column":8},"end":{"line":52,"column":25}},"32":{"start":{"line":53,"column":8},"end":{"line":53,"column":47}},"33":{"start":{"line":54,"column":8},"end":{"line":54,"column":27}},"34":{"start":{"line":55,"column":8},"end":{"line":55,"column":20}},"35":{"start":{"line":58,"column":8},"end":{"line":58,"column":40}},"36":{"start":{"line":59,"column":8},"end":{"line":59,"column":51}},"37":{"start":{"line":60,"column":8},"end":{"line":60,"column":42}},"38":{"start":{"line":61,"column":8},"end":{"line":61,"column":20}},"39":{"start":{"line":64,"column":8},"end":{"line":69,"column":9}},"40":{"start":{"line":65,"column":12},"end":{"line":65,"column":52}},"41":{"start":{"line":67,"column":27},"end":{"line":67,"column":66}},"42":{"start":{"line":68,"column":12},"end":{"line":68,"column":70}},"43":{"start":{"line":70,"column":8},"end":{"line":70,"column":60}},"44":{"start":{"line":73,"column":21},"end":{"line":73,"column":36}},"45":{"start":{"line":74,"column":8},"end":{"line":74,"column":24}},"46":{"start":{"line":75,"column":8},"end":{"line":75,"column":32}},"47":{"start":{"line":76,"column":8},"end":{"line":76,"column":52}},"48":{"start":{"line":77,"column":8},"end":{"line":77,"column":22}},"49":{"start":{"line":80,"column":0},"end":{"line":80,"column":24}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":4},"end":{"line":6,"column":5}},"loc":{"start":{"line":6,"column":28},"end":{"line":11,"column":5}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":12,"column":4},"end":{"line":12,"column":5}},"loc":{"start":{"line":12,"column":17},"end":{"line":22,"column":5}},"line":12},"2":{"name":"(anonymous_2)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":18},"end":{"line":30,"column":5}},"line":23},"3":{"name":"(anonymous_3)","decl":{"start":{"line":31,"column":4},"end":{"line":31,"column":5}},"loc":{"start":{"line":31,"column":18},"end":{"line":36,"column":5}},"line":31},"4":{"name":"(anonymous_4)","decl":{"start":{"line":37,"column":4},"end":{"line":37,"column":5}},"loc":{"start":{"line":37,"column":23},"end":{"line":49,"column":5}},"line":37},"5":{"name":"(anonymous_5)","decl":{"start":{"line":50,"column":4},"end":{"line":50,"column":5}},"loc":{"start":{"line":50,"column":27},"end":{"line":56,"column":5}},"line":50},"6":{"name":"(anonymous_6)","decl":{"start":{"line":57,"column":4},"end":{"line":57,"column":5}},"loc":{"start":{"line":57,"column":21},"end":{"line":62,"column":5}},"line":57},"7":{"name":"(anonymous_7)","decl":{"start":{"line":63,"column":4},"end":{"line":63,"column":5}},"loc":{"start":{"line":63,"column":15},"end":{"line":71,"column":5}},"line":63},"8":{"name":"(anonymous_8)","decl":{"start":{"line":72,"column":4},"end":{"line":72,"column":5}},"loc":{"start":{"line":72,"column":16},"end":{"line":78,"column":5}},"line":72}},"branchMap":{"0":{"loc":{"start":{"line":6,"column":16},"end":{"line":6,"column":26}},"type":"default-arg","locations":[{"start":{"line":6,"column":23},"end":{"line":6,"column":26}}],"line":6},"1":{"loc":{"start":{"line":14,"column":8},"end":{"line":21,"column":9}},"type":"if","locations":[{"start":{"line":14,"column":8},"end":{"line":21,"column":9}},{"start":{"line":14,"column":8},"end":{"line":21,"column":9}}],"line":14},"2":{"loc":{"start":{"line":38,"column":8},"end":{"line":46,"column":9}},"type":"if","locations":[{"start":{"line":38,"column":8},"end":{"line":46,"column":9}},{"start":{"line":38,"column":8},"end":{"line":46,"column":9}}],"line":38},"3":{"loc":{"start":{"line":50,"column":14},"end":{"line":50,"column":25}},"type":"default-arg","locations":[{"start":{"line":50,"column":23},"end":{"line":50,"column":25}}],"line":50},"4":{"loc":{"start":{"line":64,"column":8},"end":{"line":69,"column":9}},"type":"if","locations":[{"start":{"line":64,"column":8},"end":{"line":69,"column":9}},{"start":{"line":64,"column":8},"end":{"line":69,"column":9}}],"line":64},"5":{"loc":{"start":{"line":70,"column":33},"end":{"line":70,"column":45}},"type":"cond-expr","locations":[{"start":{"line":70,"column":40},"end":{"line":70,"column":41}},{"start":{"line":70,"column":44},"end":{"line":70,"column":45}}],"line":70}},"s":{"0":1,"1":1,"2":3,"3":3,"4":3,"5":3,"6":87,"7":87,"8":0,"9":0,"10":0,"11":0,"12":18,"13":18,"14":18,"15":18,"16":18,"17":18,"18":29,"19":29,"20":29,"21":29,"22":26,"23":4,"24":22,"25":22,"26":22,"27":22,"28":26,"29":26,"30":7,"31":7,"32":7,"33":7,"34":7,"35":7,"36":7,"37":7,"38":7,"39":20,"40":14,"41":14,"42":14,"43":20,"44":20,"45":20,"46":20,"47":20,"48":20,"49":1},"f":{"0":3,"1":87,"2":18,"3":29,"4":26,"5":7,"6":7,"7":20,"8":20},"b":{"0":[3],"1":[0,87],"2":[4,22],"3":[0],"4":[14,6],"5":[14,6]},"inputSourceMap":{"version":3,"file":"/home/raziel/ForkedProjects/node-postgres/packages/pg-protocol/src/buffer-writer.ts","sources":["/home/raziel/ForkedProjects/node-postgres/packages/pg-protocol/src/buffer-writer.ts"],"names":[],"mappings":"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","sourcesContent":["//binary data writer tuned for encoding binary specific to the postgres binary protocol\n\nexport class Writer {\n  private buffer: Buffer\n  private offset: number = 5\n  private headerPosition: number = 0\n  constructor(private size = 256) {\n    this.buffer = Buffer.allocUnsafe(size)\n  }\n\n  private ensure(size: number): void {\n    var remaining = this.buffer.length - this.offset\n    if (remaining < size) {\n      var oldBuffer = this.buffer\n      // exponential growth factor of around ~ 1.5\n      // https://stackoverflow.com/questions/2269063/buffer-growth-strategy\n      var newSize = oldBuffer.length + (oldBuffer.length >> 1) + size\n      this.buffer = Buffer.allocUnsafe(newSize)\n      oldBuffer.copy(this.buffer)\n    }\n  }\n\n  public addInt32(num: number): Writer {\n    this.ensure(4)\n    this.buffer[this.offset++] = (num >>> 24) & 0xff\n    this.buffer[this.offset++] = (num >>> 16) & 0xff\n    this.buffer[this.offset++] = (num >>> 8) & 0xff\n    this.buffer[this.offset++] = (num >>> 0) & 0xff\n    return this\n  }\n\n  public addInt16(num: number): Writer {\n    this.ensure(2)\n    this.buffer[this.offset++] = (num >>> 8) & 0xff\n    this.buffer[this.offset++] = (num >>> 0) & 0xff\n    return this\n  }\n\n  public addCString(string: string): Writer {\n    if (!string) {\n      this.ensure(1)\n    } else {\n      var len = Buffer.byteLength(string)\n      this.ensure(len + 1) // +1 for null terminator\n      this.buffer.write(string, this.offset, 'utf-8')\n      this.offset += len\n    }\n\n    this.buffer[this.offset++] = 0 // null terminator\n    return this\n  }\n\n  public addString(string: string = ''): Writer {\n    var len = Buffer.byteLength(string)\n    this.ensure(len)\n    this.buffer.write(string, this.offset)\n    this.offset += len\n    return this\n  }\n\n  public add(otherBuffer: Buffer): Writer {\n    this.ensure(otherBuffer.length)\n    otherBuffer.copy(this.buffer, this.offset)\n    this.offset += otherBuffer.length\n    return this\n  }\n\n  private join(code?: number): Buffer {\n    if (code) {\n      this.buffer[this.headerPosition] = code\n      //length is everything in this packet minus the code\n      const length = this.offset - (this.headerPosition + 1)\n      this.buffer.writeInt32BE(length, this.headerPosition + 1)\n    }\n    return this.buffer.slice(code ? 0 : 5, this.offset)\n  }\n\n  public flush(code?: number): Buffer {\n    var result = this.join(code)\n    this.offset = 5\n    this.headerPosition = 0\n    this.buffer = Buffer.allocUnsafe(this.size)\n    return result\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"2a59e74d734c4ae0bcc4e5ca0440455aac982547","contentHash":"77e96aa2abfcd8505dcf723e64aa0fa471b5102a26348bee818b9a12cc4cb39e"},"/home/raziel/ForkedProjects/node-postgres/packages/pg-protocol/src/parser.ts":{"path":"/home/raziel/ForkedProjects/node-postgres/packages/pg-protocol/src/parser.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":24}},"4":{"start":{"line":7,"column":19},"end":{"line":7,"column":40}},"5":{"start":{"line":8,"column":24},"end":{"line":8,"column":50}},"6":{"start":{"line":9,"column":17},"end":{"line":9,"column":51}},"7":{"start":{"line":11,"column":20},"end":{"line":11,"column":21}},"8":{"start":{"line":14,"column":19},"end":{"line":14,"column":20}},"9":{"start":{"line":15,"column":22},"end":{"line":15,"column":46}},"10":{"start":{"line":16,"column":20},"end":{"line":16,"column":41}},"11":{"start":{"line":19,"column":8},"end":{"line":19,"column":34}},"12":{"start":{"line":20,"column":8},"end":{"line":20,"column":30}},"13":{"start":{"line":21,"column":8},"end":{"line":21,"column":30}},"14":{"start":{"line":22,"column":8},"end":{"line":22,"column":57}},"15":{"start":{"line":23,"column":8},"end":{"line":25,"column":9}},"16":{"start":{"line":24,"column":12},"end":{"line":24,"column":61}},"17":{"start":{"line":26,"column":8},"end":{"line":26,"column":86}},"18":{"start":{"line":29,"column":8},"end":{"line":29,"column":33}},"19":{"start":{"line":30,"column":33},"end":{"line":30,"column":70}},"20":{"start":{"line":31,"column":21},"end":{"line":31,"column":38}},"21":{"start":{"line":32,"column":8},"end":{"line":46,"column":9}},"22":{"start":{"line":34,"column":25},"end":{"line":34,"column":44}},"23":{"start":{"line":36,"column":27},"end":{"line":36,"column":73}},"24":{"start":{"line":37,"column":38},"end":{"line":37,"column":58}},"25":{"start":{"line":38,"column":12},"end":{"line":45,"column":13}},"26":{"start":{"line":39,"column":32},"end":{"line":39,"column":100}},"27":{"start":{"line":40,"column":16},"end":{"line":40,"column":34}},"28":{"start":{"line":41,"column":16},"end":{"line":41,"column":44}},"29":{"start":{"line":44,"column":16},"end":{"line":44,"column":22}},"30":{"start":{"line":47,"column":8},"end":{"line":57,"column":9}},"31":{"start":{"line":49,"column":12},"end":{"line":49,"column":38}},"32":{"start":{"line":50,"column":12},"end":{"line":50,"column":34}},"33":{"start":{"line":51,"column":12},"end":{"line":51,"column":34}},"34":{"start":{"line":55,"column":12},"end":{"line":55,"column":58}},"35":{"start":{"line":56,"column":12},"end":{"line":56,"column":39}},"36":{"start":{"line":60,"column":8},"end":{"line":91,"column":9}},"37":{"start":{"line":61,"column":30},"end":{"line":61,"column":67}},"38":{"start":{"line":62,"column":34},"end":{"line":62,"column":63}},"39":{"start":{"line":63,"column":12},"end":{"line":82,"column":13}},"40":{"start":{"line":66,"column":16},"end":{"line":77,"column":17}},"41":{"start":{"line":68,"column":20},"end":{"line":68,"column":44}},"42":{"start":{"line":72,"column":42},"end":{"line":72,"column":68}},"43":{"start":{"line":73,"column":20},"end":{"line":75,"column":21}},"44":{"start":{"line":74,"column":24},"end":{"line":74,"column":45}},"45":{"start":{"line":76,"column":20},"end":{"line":76,"column":68}},"46":{"start":{"line":79,"column":16},"end":{"line":79,"column":105}},"47":{"start":{"line":80,"column":16},"end":{"line":80,"column":40}},"48":{"start":{"line":81,"column":16},"end":{"line":81,"column":38}},"49":{"start":{"line":84,"column":12},"end":{"line":84,"column":76}},"50":{"start":{"line":85,"column":12},"end":{"line":85,"column":42}},"51":{"start":{"line":88,"column":12},"end":{"line":88,"column":33}},"52":{"start":{"line":89,"column":12},"end":{"line":89,"column":34}},"53":{"start":{"line":90,"column":12},"end":{"line":90,"column":50}},"54":{"start":{"line":94,"column":8},"end":{"line":139,"column":9}},"55":{"start":{"line":96,"column":16},"end":{"line":96,"column":47}},"56":{"start":{"line":98,"column":16},"end":{"line":98,"column":48}},"57":{"start":{"line":100,"column":16},"end":{"line":100,"column":48}},"58":{"start":{"line":102,"column":16},"end":{"line":102,"column":41}},"59":{"start":{"line":104,"column":16},"end":{"line":104,"column":50}},"60":{"start":{"line":106,"column":16},"end":{"line":106,"column":43}},"61":{"start":{"line":108,"column":16},"end":{"line":108,"column":51}},"62":{"start":{"line":110,"column":16},"end":{"line":110,"column":45}},"63":{"start":{"line":112,"column":16},"end":{"line":112,"column":71}},"64":{"start":{"line":114,"column":16},"end":{"line":114,"column":79}},"65":{"start":{"line":116,"column":16},"end":{"line":116,"column":77}},"66":{"start":{"line":118,"column":16},"end":{"line":118,"column":76}},"67":{"start":{"line":120,"column":16},"end":{"line":120,"column":79}},"68":{"start":{"line":122,"column":16},"end":{"line":122,"column":79}},"69":{"start":{"line":124,"column":16},"end":{"line":124,"column":71}},"70":{"start":{"line":126,"column":16},"end":{"line":126,"column":90}},"71":{"start":{"line":128,"column":16},"end":{"line":128,"column":92}},"72":{"start":{"line":130,"column":16},"end":{"line":130,"column":78}},"73":{"start":{"line":132,"column":16},"end":{"line":132,"column":70}},"74":{"start":{"line":134,"column":16},"end":{"line":134,"column":71}},"75":{"start":{"line":136,"column":16},"end":{"line":136,"column":65}},"76":{"start":{"line":138,"column":16},"end":{"line":138,"column":84}},"77":{"start":{"line":142,"column":8},"end":{"line":142,"column":45}},"78":{"start":{"line":143,"column":23},"end":{"line":143,"column":44}},"79":{"start":{"line":144,"column":8},"end":{"line":144,"column":67}},"80":{"start":{"line":147,"column":8},"end":{"line":147,"column":45}},"81":{"start":{"line":148,"column":21},"end":{"line":148,"column":42}},"82":{"start":{"line":149,"column":8},"end":{"line":149,"column":67}},"83":{"start":{"line":152,"column":22},"end":{"line":152,"column":64}},"84":{"start":{"line":153,"column":8},"end":{"line":153,"column":61}},"85":{"start":{"line":156,"column":8},"end":{"line":156,"column":99}},"86":{"start":{"line":159,"column":8},"end":{"line":159,"column":101}},"87":{"start":{"line":162,"column":8},"end":{"line":162,"column":45}},"88":{"start":{"line":163,"column":25},"end":{"line":163,"column":49}},"89":{"start":{"line":164,"column":28},"end":{"line":164,"column":47}},"90":{"start":{"line":165,"column":24},"end":{"line":165,"column":95}},"91":{"start":{"line":166,"column":8},"end":{"line":168,"column":9}},"92":{"start":{"line":166,"column":21},"end":{"line":166,"column":22}},"93":{"start":{"line":167,"column":12},"end":{"line":167,"column":57}},"94":{"start":{"line":169,"column":8},"end":{"line":169,"column":23}},"95":{"start":{"line":172,"column":8},"end":{"line":172,"column":45}},"96":{"start":{"line":173,"column":26},"end":{"line":173,"column":45}},"97":{"start":{"line":174,"column":24},"end":{"line":174,"column":45}},"98":{"start":{"line":175,"column":24},"end":{"line":175,"column":45}},"99":{"start":{"line":176,"column":8},"end":{"line":176,"column":95}},"100":{"start":{"line":179,"column":8},"end":{"line":179,"column":45}},"101":{"start":{"line":180,"column":27},"end":{"line":180,"column":46}},"102":{"start":{"line":181,"column":24},"end":{"line":181,"column":80}},"103":{"start":{"line":182,"column":8},"end":{"line":184,"column":9}},"104":{"start":{"line":182,"column":21},"end":{"line":182,"column":22}},"105":{"start":{"line":183,"column":12},"end":{"line":183,"column":50}},"106":{"start":{"line":185,"column":8},"end":{"line":185,"column":23}},"107":{"start":{"line":188,"column":21},"end":{"line":188,"column":42}},"108":{"start":{"line":189,"column":24},"end":{"line":189,"column":43}},"109":{"start":{"line":190,"column":25},"end":{"line":190,"column":44}},"110":{"start":{"line":191,"column":27},"end":{"line":191,"column":46}},"111":{"start":{"line":192,"column":29},"end":{"line":192,"column":48}},"112":{"start":{"line":193,"column":33},"end":{"line":193,"column":52}},"113":{"start":{"line":194,"column":21},"end":{"line":194,"column":66}},"114":{"start":{"line":195,"column":8},"end":{"line":195,"column":111}},"115":{"start":{"line":198,"column":8},"end":{"line":198,"column":45}},"116":{"start":{"line":199,"column":27},"end":{"line":199,"column":46}},"117":{"start":{"line":200,"column":23},"end":{"line":200,"column":44}},"118":{"start":{"line":201,"column":8},"end":{"line":205,"column":9}},"119":{"start":{"line":201,"column":21},"end":{"line":201,"column":22}},"120":{"start":{"line":202,"column":24},"end":{"line":202,"column":43}},"121":{"start":{"line":204,"column":12},"end":{"line":204,"column":68}},"122":{"start":{"line":206,"column":8},"end":{"line":206,"column":61}},"123":{"start":{"line":209,"column":8},"end":{"line":209,"column":45}},"124":{"start":{"line":210,"column":21},"end":{"line":210,"column":42}},"125":{"start":{"line":211,"column":22},"end":{"line":211,"column":43}},"126":{"start":{"line":212,"column":8},"end":{"line":212,"column":74}},"127":{"start":{"line":215,"column":8},"end":{"line":215,"column":45}},"128":{"start":{"line":216,"column":26},"end":{"line":216,"column":45}},"129":{"start":{"line":217,"column":26},"end":{"line":217,"column":45}},"130":{"start":{"line":218,"column":8},"end":{"line":218,"column":82}},"131":{"start":{"line":221,"column":8},"end":{"line":221,"column":45}},"132":{"start":{"line":222,"column":21},"end":{"line":222,"column":40}},"133":{"start":{"line":224,"column":24},"end":{"line":227,"column":9}},"134":{"start":{"line":228,"column":8},"end":{"line":264,"column":9}},"135":{"start":{"line":230,"column":16},"end":{"line":230,"column":22}},"136":{"start":{"line":232,"column":16},"end":{"line":234,"column":17}},"137":{"start":{"line":233,"column":20},"end":{"line":233,"column":107}},"138":{"start":{"line":235,"column":16},"end":{"line":235,"column":22}},"139":{"start":{"line":237,"column":16},"end":{"line":241,"column":17}},"140":{"start":{"line":238,"column":20},"end":{"line":238,"column":95}},"141":{"start":{"line":239,"column":33},"end":{"line":239,"column":53}},"142":{"start":{"line":240,"column":20},"end":{"line":240,"column":82}},"143":{"start":{"line":242,"column":16},"end":{"line":242,"column":22}},"144":{"start":{"line":244,"column":16},"end":{"line":244,"column":77}},"145":{"start":{"line":245,"column":16},"end":{"line":245,"column":40}},"146":{"start":{"line":247,"column":16},"end":{"line":252,"column":36}},"147":{"start":{"line":248,"column":20},"end":{"line":248,"column":54}},"148":{"start":{"line":249,"column":20},"end":{"line":251,"column":21}},"149":{"start":{"line":250,"column":24},"end":{"line":250,"column":59}},"150":{"start":{"line":253,"column":16},"end":{"line":253,"column":22}},"151":{"start":{"line":255,"column":16},"end":{"line":255,"column":93}},"152":{"start":{"line":256,"column":16},"end":{"line":256,"column":62}},"153":{"start":{"line":257,"column":16},"end":{"line":257,"column":22}},"154":{"start":{"line":259,"column":16},"end":{"line":259,"column":87}},"155":{"start":{"line":260,"column":16},"end":{"line":260,"column":62}},"156":{"start":{"line":261,"column":16},"end":{"line":261,"column":22}},"157":{"start":{"line":263,"column":16},"end":{"line":263,"column":81}},"158":{"start":{"line":265,"column":8},"end":{"line":265,"column":23}},"159":{"start":{"line":268,"column":8},"end":{"line":268,"column":45}},"160":{"start":{"line":269,"column":23},"end":{"line":269,"column":25}},"161":{"start":{"line":270,"column":24},"end":{"line":270,"column":45}},"162":{"start":{"line":271,"column":8},"end":{"line":274,"column":9}},"163":{"start":{"line":272,"column":12},"end":{"line":272,"column":54}},"164":{"start":{"line":273,"column":12},"end":{"line":273,"column":46}},"165":{"start":{"line":275,"column":29},"end":{"line":275,"column":37}},"166":{"start":{"line":276,"column":24},"end":{"line":278,"column":70}},"167":{"start":{"line":279,"column":8},"end":{"line":279,"column":36}},"168":{"start":{"line":280,"column":8},"end":{"line":280,"column":32}},"169":{"start":{"line":281,"column":8},"end":{"line":281,"column":34}},"170":{"start":{"line":282,"column":8},"end":{"line":282,"column":32}},"171":{"start":{"line":283,"column":8},"end":{"line":283,"column":36}},"172":{"start":{"line":284,"column":8},"end":{"line":284,"column":44}},"173":{"start":{"line":285,"column":8},"end":{"line":285,"column":41}},"174":{"start":{"line":286,"column":8},"end":{"line":286,"column":33}},"175":{"start":{"line":287,"column":8},"end":{"line":287,"column":34}},"176":{"start":{"line":288,"column":8},"end":{"line":288,"column":33}},"177":{"start":{"line":289,"column":8},"end":{"line":289,"column":34}},"178":{"start":{"line":290,"column":8},"end":{"line":290,"column":36}},"179":{"start":{"line":291,"column":8},"end":{"line":291,"column":38}},"180":{"start":{"line":292,"column":8},"end":{"line":292,"column":32}},"181":{"start":{"line":293,"column":8},"end":{"line":293,"column":32}},"182":{"start":{"line":294,"column":8},"end":{"line":294,"column":35}},"183":{"start":{"line":295,"column":8},"end":{"line":295,"column":23}},"184":{"start":{"line":298,"column":0},"end":{"line":298,"column":24}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":18,"column":4},"end":{"line":18,"column":5}},"loc":{"start":{"line":18,"column":22},"end":{"line":27,"column":5}},"line":18},"2":{"name":"(anonymous_2)","decl":{"start":{"line":28,"column":4},"end":{"line":28,"column":5}},"loc":{"start":{"line":28,"column":28},"end":{"line":58,"column":5}},"line":28},"3":{"name":"(anonymous_3)","decl":{"start":{"line":59,"column":4},"end":{"line":59,"column":5}},"loc":{"start":{"line":59,"column":24},"end":{"line":92,"column":5}},"line":59},"4":{"name":"(anonymous_4)","decl":{"start":{"line":93,"column":4},"end":{"line":93,"column":5}},"loc":{"start":{"line":93,"column":46},"end":{"line":140,"column":5}},"line":93},"5":{"name":"(anonymous_5)","decl":{"start":{"line":141,"column":4},"end":{"line":141,"column":5}},"loc":{"start":{"line":141,"column":53},"end":{"line":145,"column":5}},"line":141},"6":{"name":"(anonymous_6)","decl":{"start":{"line":146,"column":4},"end":{"line":146,"column":5}},"loc":{"start":{"line":146,"column":55},"end":{"line":150,"column":5}},"line":146},"7":{"name":"(anonymous_7)","decl":{"start":{"line":151,"column":4},"end":{"line":151,"column":5}},"loc":{"start":{"line":151,"column":41},"end":{"line":154,"column":5}},"line":151},"8":{"name":"(anonymous_8)","decl":{"start":{"line":155,"column":4},"end":{"line":155,"column":5}},"loc":{"start":{"line":155,"column":46},"end":{"line":157,"column":5}},"line":155},"9":{"name":"(anonymous_9)","decl":{"start":{"line":158,"column":4},"end":{"line":158,"column":5}},"loc":{"start":{"line":158,"column":47},"end":{"line":160,"column":5}},"line":158},"10":{"name":"(anonymous_10)","decl":{"start":{"line":161,"column":4},"end":{"line":161,"column":5}},"loc":{"start":{"line":161,"column":57},"end":{"line":170,"column":5}},"line":161},"11":{"name":"(anonymous_11)","decl":{"start":{"line":171,"column":4},"end":{"line":171,"column":5}},"loc":{"start":{"line":171,"column":52},"end":{"line":177,"column":5}},"line":171},"12":{"name":"(anonymous_12)","decl":{"start":{"line":178,"column":4},"end":{"line":178,"column":5}},"loc":{"start":{"line":178,"column":54},"end":{"line":186,"column":5}},"line":178},"13":{"name":"(anonymous_13)","decl":{"start":{"line":187,"column":4},"end":{"line":187,"column":5}},"loc":{"start":{"line":187,"column":17},"end":{"line":196,"column":5}},"line":187},"14":{"name":"(anonymous_14)","decl":{"start":{"line":197,"column":4},"end":{"line":197,"column":5}},"loc":{"start":{"line":197,"column":47},"end":{"line":207,"column":5}},"line":197},"15":{"name":"(anonymous_15)","decl":{"start":{"line":208,"column":4},"end":{"line":208,"column":5}},"loc":{"start":{"line":208,"column":55},"end":{"line":213,"column":5}},"line":208},"16":{"name":"(anonymous_16)","decl":{"start":{"line":214,"column":4},"end":{"line":214,"column":5}},"loc":{"start":{"line":214,"column":47},"end":{"line":219,"column":5}},"line":214},"17":{"name":"(anonymous_17)","decl":{"start":{"line":220,"column":4},"end":{"line":220,"column":5}},"loc":{"start":{"line":220,"column":55},"end":{"line":266,"column":5}},"line":220},"18":{"name":"(anonymous_18)","decl":{"start":{"line":267,"column":4},"end":{"line":267,"column":5}},"loc":{"start":{"line":267,"column":51},"end":{"line":296,"column":5}},"line":267}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":23,"column":8},"end":{"line":25,"column":9}},"type":"if","locations":[{"start":{"line":23,"column":8},"end":{"line":25,"column":9}},{"start":{"line":23,"column":8},"end":{"line":25,"column":9}}],"line":23},"4":{"loc":{"start":{"line":23,"column":13},"end":{"line":23,"column":66}},"type":"cond-expr","locations":[{"start":{"line":23,"column":48},"end":{"line":23,"column":54}},{"start":{"line":23,"column":57},"end":{"line":23,"column":66}}],"line":23},"5":{"loc":{"start":{"line":23,"column":13},"end":{"line":23,"column":45}},"type":"binary-expr","locations":[{"start":{"line":23,"column":13},"end":{"line":23,"column":26}},{"start":{"line":23,"column":30},"end":{"line":23,"column":45}}],"line":23},"6":{"loc":{"start":{"line":26,"column":20},"end":{"line":26,"column":85}},"type":"binary-expr","locations":[{"start":{"line":26,"column":21},"end":{"line":26,"column":74}},{"start":{"line":26,"column":79},"end":{"line":26,"column":85}}],"line":26},"7":{"loc":{"start":{"line":26,"column":21},"end":{"line":26,"column":74}},"type":"cond-expr","locations":[{"start":{"line":26,"column":56},"end":{"line":26,"column":62}},{"start":{"line":26,"column":65},"end":{"line":26,"column":74}}],"line":26},"8":{"loc":{"start":{"line":26,"column":21},"end":{"line":26,"column":53}},"type":"binary-expr","locations":[{"start":{"line":26,"column":21},"end":{"line":26,"column":34}},{"start":{"line":26,"column":38},"end":{"line":26,"column":53}}],"line":26},"9":{"loc":{"start":{"line":38,"column":12},"end":{"line":45,"column":13}},"type":"if","locations":[{"start":{"line":38,"column":12},"end":{"line":45,"column":13}},{"start":{"line":38,"column":12},"end":{"line":45,"column":13}}],"line":38},"10":{"loc":{"start":{"line":47,"column":8},"end":{"line":57,"column":9}},"type":"if","locations":[{"start":{"line":47,"column":8},"end":{"line":57,"column":9}},{"start":{"line":47,"column":8},"end":{"line":57,"column":9}}],"line":47},"11":{"loc":{"start":{"line":60,"column":8},"end":{"line":91,"column":9}},"type":"if","locations":[{"start":{"line":60,"column":8},"end":{"line":91,"column":9}},{"start":{"line":60,"column":8},"end":{"line":91,"column":9}}],"line":60},"12":{"loc":{"start":{"line":63,"column":12},"end":{"line":82,"column":13}},"type":"if","locations":[{"start":{"line":63,"column":12},"end":{"line":82,"column":13}},{"start":{"line":63,"column":12},"end":{"line":82,"column":13}}],"line":63},"13":{"loc":{"start":{"line":66,"column":16},"end":{"line":77,"column":17}},"type":"if","locations":[{"start":{"line":66,"column":16},"end":{"line":77,"column":17}},{"start":{"line":66,"column":16},"end":{"line":77,"column":17}}],"line":66},"14":{"loc":{"start":{"line":66,"column":20},"end":{"line":66,"column":97}},"type":"binary-expr","locations":[{"start":{"line":66,"column":20},"end":{"line":66,"column":55}},{"start":{"line":66,"column":59},"end":{"line":66,"column":97}}],"line":66},"15":{"loc":{"start":{"line":94,"column":8},"end":{"line":139,"column":9}},"type":"switch","locations":[{"start":{"line":95,"column":12},"end":{"line":96,"column":47}},{"start":{"line":97,"column":12},"end":{"line":98,"column":48}},{"start":{"line":99,"column":12},"end":{"line":100,"column":48}},{"start":{"line":101,"column":12},"end":{"line":102,"column":41}},{"start":{"line":103,"column":12},"end":{"line":104,"column":50}},{"start":{"line":105,"column":12},"end":{"line":106,"column":43}},{"start":{"line":107,"column":12},"end":{"line":108,"column":51}},{"start":{"line":109,"column":12},"end":{"line":110,"column":45}},{"start":{"line":111,"column":12},"end":{"line":112,"column":71}},{"start":{"line":113,"column":12},"end":{"line":114,"column":79}},{"start":{"line":115,"column":12},"end":{"line":116,"column":77}},{"start":{"line":117,"column":12},"end":{"line":118,"column":76}},{"start":{"line":119,"column":12},"end":{"line":120,"column":79}},{"start":{"line":121,"column":12},"end":{"line":122,"column":79}},{"start":{"line":123,"column":12},"end":{"line":124,"column":71}},{"start":{"line":125,"column":12},"end":{"line":126,"column":90}},{"start":{"line":127,"column":12},"end":{"line":128,"column":92}},{"start":{"line":129,"column":12},"end":{"line":130,"column":78}},{"start":{"line":131,"column":12},"end":{"line":132,"column":70}},{"start":{"line":133,"column":12},"end":{"line":134,"column":71}},{"start":{"line":135,"column":12},"end":{"line":136,"column":65}},{"start":{"line":137,"column":12},"end":{"line":138,"column":84}}],"line":94},"16":{"loc":{"start":{"line":194,"column":21},"end":{"line":194,"column":66}},"type":"cond-expr","locations":[{"start":{"line":194,"column":49},"end":{"line":194,"column":55}},{"start":{"line":194,"column":58},"end":{"line":194,"column":66}}],"line":194},"17":{"loc":{"start":{"line":204,"column":24},"end":{"line":204,"column":67}},"type":"cond-expr","locations":[{"start":{"line":204,"column":37},"end":{"line":204,"column":41}},{"start":{"line":204,"column":44},"end":{"line":204,"column":67}}],"line":204},"18":{"loc":{"start":{"line":228,"column":8},"end":{"line":264,"column":9}},"type":"switch","locations":[{"start":{"line":229,"column":12},"end":{"line":230,"column":22}},{"start":{"line":231,"column":12},"end":{"line":235,"column":22}},{"start":{"line":236,"column":12},"end":{"line":242,"column":22}},{"start":{"line":243,"column":12},"end":{"line":253,"column":22}},{"start":{"line":254,"column":12},"end":{"line":257,"column":22}},{"start":{"line":258,"column":12},"end":{"line":261,"column":22}},{"start":{"line":262,"column":12},"end":{"line":263,"column":81}}],"line":228},"19":{"loc":{"start":{"line":232,"column":16},"end":{"line":234,"column":17}},"type":"if","locations":[{"start":{"line":232,"column":16},"end":{"line":234,"column":17}},{"start":{"line":232,"column":16},"end":{"line":234,"column":17}}],"line":232},"20":{"loc":{"start":{"line":237,"column":16},"end":{"line":241,"column":17}},"type":"if","locations":[{"start":{"line":237,"column":16},"end":{"line":241,"column":17}},{"start":{"line":237,"column":16},"end":{"line":241,"column":17}}],"line":237},"21":{"loc":{"start":{"line":249,"column":20},"end":{"line":251,"column":21}},"type":"if","locations":[{"start":{"line":249,"column":20},"end":{"line":251,"column":21}},{"start":{"line":249,"column":20},"end":{"line":251,"column":21}}],"line":249},"22":{"loc":{"start":{"line":276,"column":24},"end":{"line":278,"column":70}},"type":"cond-expr","locations":[{"start":{"line":277,"column":14},"end":{"line":277,"column":64}},{"start":{"line":278,"column":14},"end":{"line":278,"column":70}}],"line":276}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":48,"12":48,"13":48,"14":48,"15":48,"16":0,"17":48,"18":54,"19":54,"20":54,"21":54,"22":59,"23":59,"24":59,"25":59,"26":55,"27":55,"28":55,"29":4,"30":54,"31":46,"32":46,"33":46,"34":8,"35":8,"36":54,"37":6,"38":6,"39":6,"40":6,"41":1,"42":5,"43":5,"44":8,"45":5,"46":6,"47":6,"48":6,"49":6,"50":6,"51":48,"52":48,"53":48,"54":55,"55":2,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":15,"64":1,"65":8,"66":1,"67":8,"68":1,"69":1,"70":2,"71":1,"72":3,"73":2,"74":2,"75":1,"76":0,"77":8,"78":8,"79":8,"80":1,"81":1,"82":1,"83":1,"84":1,"85":2,"86":2,"87":4,"88":4,"89":4,"90":4,"91":4,"92":4,"93":5,"94":4,"95":1,"96":1,"97":1,"98":1,"99":1,"100":3,"101":3,"102":3,"103":3,"104":3,"105":3,"106":3,"107":3,"108":3,"109":3,"110":3,"111":3,"112":3,"113":3,"114":3,"115":15,"116":15,"117":15,"118":15,"119":15,"120":38,"121":38,"122":15,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1,"130":1,"131":8,"132":8,"133":8,"134":8,"135":1,"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1,"143":0,"144":1,"145":1,"146":1,"147":2,"148":2,"149":1,"150":1,"151":2,"152":2,"153":2,"154":2,"155":2,"156":2,"157":0,"158":7,"159":3,"160":3,"161":3,"162":3,"163":14,"164":14,"165":3,"166":3,"167":3,"168":3,"169":3,"170":3,"171":3,"172":3,"173":3,"174":3,"175":3,"176":3,"177":3,"178":3,"179":3,"180":3,"181":3,"182":3,"183":3,"184":1},"f":{"0":1,"1":48,"2":54,"3":54,"4":55,"5":8,"6":1,"7":1,"8":2,"9":2,"10":4,"11":1,"12":3,"13":3,"14":15,"15":1,"16":1,"17":8,"18":3},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[0,48],"4":[48,0],"5":[48,48],"6":[48,48],"7":[48,0],"8":[48,48],"9":[55,4],"10":[46,8],"11":[6,48],"12":[6,0],"13":[1,5],"14":[6,1],"15":[2,1,1,1,1,1,1,1,15,1,8,1,8,1,1,2,1,3,2,2,1,0],"16":[3,0],"17":[12,26],"18":[1,1,1,1,2,2,0],"19":[1,0],"20":[1,0],"21":[1,1],"22":[1,2]},"inputSourceMap":{"version":3,"file":"/home/raziel/ForkedProjects/node-postgres/packages/pg-protocol/src/parser.ts","sources":["/home/raziel/ForkedProjects/node-postgres/packages/pg-protocol/src/parser.ts"],"names":[],"mappings":"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","sourcesContent":["import { TransformOptions } from 'stream'\nimport {\n  Mode,\n  bindComplete,\n  parseComplete,\n  closeComplete,\n  noData,\n  portalSuspended,\n  copyDone,\n  replicationStart,\n  emptyQuery,\n  ReadyForQueryMessage,\n  CommandCompleteMessage,\n  CopyDataMessage,\n  CopyResponse,\n  NotificationResponseMessage,\n  RowDescriptionMessage,\n  Field,\n  DataRowMessage,\n  ParameterStatusMessage,\n  BackendKeyDataMessage,\n  DatabaseError,\n  BackendMessage,\n  MessageName,\n  AuthenticationMD5Password,\n  NoticeMessage,\n} from './messages'\nimport { BufferReader } from './buffer-reader'\nimport assert from 'assert'\n\n// every message is prefixed with a single bye\nconst CODE_LENGTH = 1\n// every message has an int32 length which includes itself but does\n// NOT include the code in the length\nconst LEN_LENGTH = 4\n\nconst HEADER_LENGTH = CODE_LENGTH + LEN_LENGTH\n\nexport type Packet = {\n  code: number\n  packet: Buffer\n}\n\nconst emptyBuffer = Buffer.allocUnsafe(0)\n\ntype StreamOptions = TransformOptions & {\n  mode: Mode\n}\n\nconst enum MessageCodes {\n  DataRow = 0x44, // D\n  ParseComplete = 0x31, // 1\n  BindComplete = 0x32, // 2\n  CloseComplete = 0x33, // 3\n  CommandComplete = 0x43, // C\n  ReadyForQuery = 0x5a, // Z\n  NoData = 0x6e, // n\n  NotificationResponse = 0x41, // A\n  AuthenticationResponse = 0x52, // R\n  ParameterStatus = 0x53, // S\n  BackendKeyData = 0x4b, // K\n  ErrorMessage = 0x45, // E\n  NoticeMessage = 0x4e, // N\n  RowDescriptionMessage = 0x54, // T\n  PortalSuspended = 0x73, // s\n  ReplicationStart = 0x57, // W\n  EmptyQuery = 0x49, // I\n  CopyIn = 0x47, // G\n  CopyOut = 0x48, // H\n  CopyDone = 0x63, // c\n  CopyData = 0x64, // d\n}\n\nexport type MessageCallback = (msg: BackendMessage) => void\n\nexport class Parser {\n  private buffer: Buffer = emptyBuffer\n  private bufferLength: number = 0\n  private bufferOffset: number = 0\n  private reader = new BufferReader()\n  private mode: Mode\n\n  constructor(opts?: StreamOptions) {\n    if (opts?.mode === 'binary') {\n      throw new Error('Binary mode not supported yet')\n    }\n    this.mode = opts?.mode || 'text'\n  }\n\n  public parse(buffer: Buffer, callback: MessageCallback) {\n    this.mergeBuffer(buffer)\n    const bufferFullLength = this.bufferOffset + this.bufferLength\n    let offset = this.bufferOffset\n    while (offset + HEADER_LENGTH <= bufferFullLength) {\n      // code is 1 byte long - it identifies the message type\n      const code = this.buffer[offset]\n      // length is 1 Uint32BE - it is the length of the message EXCLUDING the code\n      const length = this.buffer.readUInt32BE(offset + CODE_LENGTH)\n      const fullMessageLength = CODE_LENGTH + length\n      if (fullMessageLength + offset <= bufferFullLength) {\n        const message = this.handlePacket(offset + HEADER_LENGTH, code, length, this.buffer)\n        callback(message)\n        offset += fullMessageLength\n      } else {\n        break\n      }\n    }\n    if (offset === bufferFullLength) {\n      // No more use for the buffer\n      this.buffer = emptyBuffer\n      this.bufferLength = 0\n      this.bufferOffset = 0\n    } else {\n      // Adjust the cursors of remainingBuffer\n      this.bufferLength = bufferFullLength - offset\n      this.bufferOffset = offset\n    }\n  }\n\n  private mergeBuffer(buffer: Buffer): void {\n    if (this.bufferLength > 0) {\n      const newLength = this.bufferLength + buffer.byteLength\n      const newFullLength = newLength + this.bufferOffset\n      if (newFullLength > this.buffer.byteLength) {\n        // We can't concat the new buffer with the remaining one\n        let newBuffer: Buffer\n        if (newLength <= this.buffer.byteLength && this.bufferOffset >= this.bufferLength) {\n          // We can move the relevant part to the beginning of the buffer instead of allocating a new buffer\n          newBuffer = this.buffer\n        } else {\n          // Allocate a new larger buffer\n          let newBufferLength = this.buffer.byteLength * 2\n          while (newLength >= newBufferLength) {\n            newBufferLength *= 2\n          }\n          newBuffer = Buffer.allocUnsafe(newBufferLength)\n        }\n        // Move the remaining buffer to the new one\n        this.buffer.copy(newBuffer, 0, this.bufferOffset, this.bufferOffset + this.bufferLength)\n        this.buffer = newBuffer\n        this.bufferOffset = 0\n      }\n      // Concat the new buffer with the remaining one\n      buffer.copy(this.buffer, this.bufferOffset + this.bufferLength)\n      this.bufferLength = newLength\n    } else {\n      this.buffer = buffer\n      this.bufferOffset = 0\n      this.bufferLength = buffer.byteLength\n    }\n  }\n\n  private handlePacket(offset: number, code: number, length: number, bytes: Buffer): BackendMessage {\n    switch (code) {\n      case MessageCodes.BindComplete:\n        return bindComplete\n      case MessageCodes.ParseComplete:\n        return parseComplete\n      case MessageCodes.CloseComplete:\n        return closeComplete\n      case MessageCodes.NoData:\n        return noData\n      case MessageCodes.PortalSuspended:\n        return portalSuspended\n      case MessageCodes.CopyDone:\n        return copyDone\n      case MessageCodes.ReplicationStart:\n        return replicationStart\n      case MessageCodes.EmptyQuery:\n        return emptyQuery\n      case MessageCodes.DataRow:\n        return this.parseDataRowMessage(offset, length, bytes)\n      case MessageCodes.CommandComplete:\n        return this.parseCommandCompleteMessage(offset, length, bytes)\n      case MessageCodes.ReadyForQuery:\n        return this.parseReadyForQueryMessage(offset, length, bytes)\n      case MessageCodes.NotificationResponse:\n        return this.parseNotificationMessage(offset, length, bytes)\n      case MessageCodes.AuthenticationResponse:\n        return this.parseAuthenticationResponse(offset, length, bytes)\n      case MessageCodes.ParameterStatus:\n        return this.parseParameterStatusMessage(offset, length, bytes)\n      case MessageCodes.BackendKeyData:\n        return this.parseBackendKeyData(offset, length, bytes)\n      case MessageCodes.ErrorMessage:\n        return this.parseErrorMessage(offset, length, bytes, MessageName.error)\n      case MessageCodes.NoticeMessage:\n        return this.parseErrorMessage(offset, length, bytes, MessageName.notice)\n      case MessageCodes.RowDescriptionMessage:\n        return this.parseRowDescriptionMessage(offset, length, bytes)\n      case MessageCodes.CopyIn:\n        return this.parseCopyInMessage(offset, length, bytes)\n      case MessageCodes.CopyOut:\n        return this.parseCopyOutMessage(offset, length, bytes)\n      case MessageCodes.CopyData:\n        return this.parseCopyData(offset, length, bytes)\n      default:\n        assert.fail(`unknown message code: ${code.toString(16)}`)\n    }\n  }\n\n  private parseReadyForQueryMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const status = this.reader.string(1)\n    return new ReadyForQueryMessage(length, status)\n  }\n\n  private parseCommandCompleteMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const text = this.reader.cstring()\n    return new CommandCompleteMessage(length, text)\n  }\n\n  private parseCopyData(offset: number, length: number, bytes: Buffer) {\n    const chunk = bytes.slice(offset, offset + (length - 4))\n    return new CopyDataMessage(length, chunk)\n  }\n\n  private parseCopyInMessage(offset: number, length: number, bytes: Buffer) {\n    return this.parseCopyMessage(offset, length, bytes, MessageName.copyInResponse)\n  }\n\n  private parseCopyOutMessage(offset: number, length: number, bytes: Buffer) {\n    return this.parseCopyMessage(offset, length, bytes, MessageName.copyOutResponse)\n  }\n\n  private parseCopyMessage(offset: number, length: number, bytes: Buffer, messageName: MessageName) {\n    this.reader.setBuffer(offset, bytes)\n    const isBinary = this.reader.byte() !== 0\n    const columnCount = this.reader.int16()\n    const message = new CopyResponse(length, messageName, isBinary, columnCount)\n    for (let i = 0; i < columnCount; i++) {\n      message.columnTypes[i] = this.reader.int16()\n    }\n    return message\n  }\n\n  private parseNotificationMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const processId = this.reader.int32()\n    const channel = this.reader.cstring()\n    const payload = this.reader.cstring()\n    return new NotificationResponseMessage(length, processId, channel, payload)\n  }\n\n  private parseRowDescriptionMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const fieldCount = this.reader.int16()\n    const message = new RowDescriptionMessage(length, fieldCount)\n    for (let i = 0; i < fieldCount; i++) {\n      message.fields[i] = this.parseField()\n    }\n    return message\n  }\n\n  private parseField(): Field {\n    const name = this.reader.cstring()\n    const tableID = this.reader.int32()\n    const columnID = this.reader.int16()\n    const dataTypeID = this.reader.int32()\n    const dataTypeSize = this.reader.int16()\n    const dataTypeModifier = this.reader.int32()\n    const mode = this.reader.int16() === 0 ? 'text' : 'binary'\n    return new Field(name, tableID, columnID, dataTypeID, dataTypeSize, dataTypeModifier, mode)\n  }\n\n  private parseDataRowMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const fieldCount = this.reader.int16()\n    const fields: any[] = new Array(fieldCount)\n    for (let i = 0; i < fieldCount; i++) {\n      const len = this.reader.int32()\n      // a -1 for length means the value of the field is null\n      fields[i] = len === -1 ? null : this.reader.string(len)\n    }\n    return new DataRowMessage(length, fields)\n  }\n\n  private parseParameterStatusMessage(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const name = this.reader.cstring()\n    const value = this.reader.cstring()\n    return new ParameterStatusMessage(length, name, value)\n  }\n\n  private parseBackendKeyData(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const processID = this.reader.int32()\n    const secretKey = this.reader.int32()\n    return new BackendKeyDataMessage(length, processID, secretKey)\n  }\n\n  public parseAuthenticationResponse(offset: number, length: number, bytes: Buffer) {\n    this.reader.setBuffer(offset, bytes)\n    const code = this.reader.int32()\n    // TODO(bmc): maybe better types here\n    const message: BackendMessage & any = {\n      name: MessageName.authenticationOk,\n      length,\n    }\n\n    switch (code) {\n      case 0: // AuthenticationOk\n        break\n      case 3: // AuthenticationCleartextPassword\n        if (message.length === 8) {\n          message.name = MessageName.authenticationCleartextPassword\n        }\n        break\n      case 5: // AuthenticationMD5Password\n        if (message.length === 12) {\n          message.name = MessageName.authenticationMD5Password\n          const salt = this.reader.bytes(4)\n          return new AuthenticationMD5Password(length, salt)\n        }\n        break\n      case 10: // AuthenticationSASL\n        message.name = MessageName.authenticationSASL\n        message.mechanisms = []\n        let mechanism: string\n        do {\n          mechanism = this.reader.cstring()\n\n          if (mechanism) {\n            message.mechanisms.push(mechanism)\n          }\n        } while (mechanism)\n        break\n      case 11: // AuthenticationSASLContinue\n        message.name = MessageName.authenticationSASLContinue\n        message.data = this.reader.string(length - 8)\n        break\n      case 12: // AuthenticationSASLFinal\n        message.name = MessageName.authenticationSASLFinal\n        message.data = this.reader.string(length - 8)\n        break\n      default:\n        throw new Error('Unknown authenticationOk message type ' + code)\n    }\n    return message\n  }\n\n  private parseErrorMessage(offset: number, length: number, bytes: Buffer, name: MessageName) {\n    this.reader.setBuffer(offset, bytes)\n    const fields: Record<string, string> = {}\n    let fieldType = this.reader.string(1)\n    while (fieldType !== '\\0') {\n      fields[fieldType] = this.reader.cstring()\n      fieldType = this.reader.string(1)\n    }\n\n    const messageValue = fields.M\n\n    const message =\n      name === MessageName.notice\n        ? new NoticeMessage(length, messageValue)\n        : new DatabaseError(messageValue, length, name)\n\n    message.severity = fields.S\n    message.code = fields.C\n    message.detail = fields.D\n    message.hint = fields.H\n    message.position = fields.P\n    message.internalPosition = fields.p\n    message.internalQuery = fields.q\n    message.where = fields.W\n    message.schema = fields.s\n    message.table = fields.t\n    message.column = fields.c\n    message.dataType = fields.d\n    message.constraint = fields.n\n    message.file = fields.F\n    message.line = fields.L\n    message.routine = fields.R\n    return message\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"9c8ff8a206ae184b595f148547f351f2a91f2d4a","contentHash":"a16e5616ce8d606ad135d42c1d7c5019b0fae5537cc8f4d2e0b156d20f41600a"},"/home/raziel/ForkedProjects/node-postgres/packages/pg-protocol/src/buffer-reader.ts":{"path":"/home/raziel/ForkedProjects/node-postgres/packages/pg-protocol/src/buffer-reader.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":30}},"2":{"start":{"line":4,"column":20},"end":{"line":4,"column":41}},"3":{"start":{"line":7,"column":8},"end":{"line":7,"column":29}},"4":{"start":{"line":8,"column":8},"end":{"line":8,"column":34}},"5":{"start":{"line":10,"column":8},"end":{"line":10,"column":32}},"6":{"start":{"line":13,"column":8},"end":{"line":13,"column":29}},"7":{"start":{"line":14,"column":8},"end":{"line":14,"column":29}},"8":{"start":{"line":17,"column":23},"end":{"line":17,"column":59}},"9":{"start":{"line":18,"column":8},"end":{"line":18,"column":25}},"10":{"start":{"line":19,"column":8},"end":{"line":19,"column":22}},"11":{"start":{"line":22,"column":23},"end":{"line":22,"column":47}},"12":{"start":{"line":23,"column":8},"end":{"line":23,"column":22}},"13":{"start":{"line":24,"column":8},"end":{"line":24,"column":22}},"14":{"start":{"line":27,"column":23},"end":{"line":27,"column":59}},"15":{"start":{"line":28,"column":8},"end":{"line":28,"column":25}},"16":{"start":{"line":29,"column":8},"end":{"line":29,"column":22}},"17":{"start":{"line":32,"column":23},"end":{"line":32,"column":93}},"18":{"start":{"line":33,"column":8},"end":{"line":33,"column":30}},"19":{"start":{"line":34,"column":8},"end":{"line":34,"column":22}},"20":{"start":{"line":37,"column":22},"end":{"line":37,"column":33}},"21":{"start":{"line":38,"column":18},"end":{"line":38,"column":23}},"22":{"start":{"line":39,"column":8},"end":{"line":39,"column":44}},"23":{"start":{"line":40,"column":8},"end":{"line":40,"column":26}},"24":{"start":{"line":41,"column":8},"end":{"line":41,"column":67}},"25":{"start":{"line":44,"column":23},"end":{"line":44,"column":75}},"26":{"start":{"line":45,"column":8},"end":{"line":45,"column":30}},"27":{"start":{"line":46,"column":8},"end":{"line":46,"column":22}},"28":{"start":{"line":49,"column":0},"end":{"line":49,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":4},"end":{"line":6,"column":5}},"loc":{"start":{"line":6,"column":28},"end":{"line":11,"column":5}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":12,"column":4},"end":{"line":12,"column":5}},"loc":{"start":{"line":12,"column":30},"end":{"line":15,"column":5}},"line":12},"2":{"name":"(anonymous_2)","decl":{"start":{"line":16,"column":4},"end":{"line":16,"column":5}},"loc":{"start":{"line":16,"column":12},"end":{"line":20,"column":5}},"line":16},"3":{"name":"(anonymous_3)","decl":{"start":{"line":21,"column":4},"end":{"line":21,"column":5}},"loc":{"start":{"line":21,"column":11},"end":{"line":25,"column":5}},"line":21},"4":{"name":"(anonymous_4)","decl":{"start":{"line":26,"column":4},"end":{"line":26,"column":5}},"loc":{"start":{"line":26,"column":12},"end":{"line":30,"column":5}},"line":26},"5":{"name":"(anonymous_5)","decl":{"start":{"line":31,"column":4},"end":{"line":31,"column":5}},"loc":{"start":{"line":31,"column":19},"end":{"line":35,"column":5}},"line":31},"6":{"name":"(anonymous_6)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":14},"end":{"line":42,"column":5}},"line":36},"7":{"name":"(anonymous_7)","decl":{"start":{"line":43,"column":4},"end":{"line":43,"column":5}},"loc":{"start":{"line":43,"column":18},"end":{"line":47,"column":5}},"line":43}},"branchMap":{"0":{"loc":{"start":{"line":6,"column":16},"end":{"line":6,"column":26}},"type":"default-arg","locations":[{"start":{"line":6,"column":25},"end":{"line":6,"column":26}}],"line":6}},"s":{"0":1,"1":1,"2":1,"3":48,"4":48,"5":48,"6":45,"7":45,"8":36,"9":36,"10":36,"11":4,"12":4,"13":4,"14":58,"15":58,"16":58,"17":55,"18":55,"19":55,"20":24,"21":24,"22":24,"23":24,"24":24,"25":1,"26":1,"27":1,"28":1},"f":{"0":48,"1":45,"2":36,"3":4,"4":58,"5":55,"6":24,"7":1},"b":{"0":[48]},"inputSourceMap":{"version":3,"file":"/home/raziel/ForkedProjects/node-postgres/packages/pg-protocol/src/buffer-reader.ts","sources":["/home/raziel/ForkedProjects/node-postgres/packages/pg-protocol/src/buffer-reader.ts"],"names":[],"mappings":";;;AAAA,MAAM,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAA;AAEzC,MAAa,YAAY;IAMvB,YAAoB,SAAiB,CAAC;QAAlB,WAAM,GAAN,MAAM,CAAY;QAL9B,WAAM,GAAW,WAAW,CAAA;QAEpC,wCAAwC;QAChC,aAAQ,GAAW,OAAO,CAAA;IAEO,CAAC;IAEnC,SAAS,CAAC,MAAc,EAAE,MAAc;QAC7C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;IACtB,CAAC;IAEM,KAAK;QACV,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACnD,IAAI,CAAC,MAAM,IAAI,CAAC,CAAA;QAChB,OAAO,MAAM,CAAA;IACf,CAAC;IAEM,IAAI;QACT,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACvC,IAAI,CAAC,MAAM,EAAE,CAAA;QACb,OAAO,MAAM,CAAA;IACf,CAAC;IAEM,KAAK;QACV,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACnD,IAAI,CAAC,MAAM,IAAI,CAAC,CAAA;QAChB,OAAO,MAAM,CAAA;IACf,CAAC;IAEM,MAAM,CAAC,MAAc;QAC1B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,CAAA;QACrF,IAAI,CAAC,MAAM,IAAI,MAAM,CAAA;QACrB,OAAO,MAAM,CAAA;IACf,CAAC;IAEM,OAAO;QACZ,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAA;QACzB,IAAI,GAAG,GAAG,KAAK,CAAA;QACf,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,EAAE,GAAE;QACnC,IAAI,CAAC,MAAM,GAAG,GAAG,CAAA;QACjB,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE,GAAG,GAAG,CAAC,CAAC,CAAA;IAC5D,CAAC;IAEM,KAAK,CAAC,MAAc;QACzB,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,CAAA;QACnE,IAAI,CAAC,MAAM,IAAI,MAAM,CAAA;QACrB,OAAO,MAAM,CAAA;IACf,CAAC;CACF;AAlDD,oCAkDC","sourcesContent":["const emptyBuffer = Buffer.allocUnsafe(0)\n\nexport class BufferReader {\n  private buffer: Buffer = emptyBuffer\n\n  // TODO(bmc): support non-utf8 encoding?\n  private encoding: string = 'utf-8'\n\n  constructor(private offset: number = 0) {}\n\n  public setBuffer(offset: number, buffer: Buffer): void {\n    this.offset = offset\n    this.buffer = buffer\n  }\n\n  public int16(): number {\n    const result = this.buffer.readInt16BE(this.offset)\n    this.offset += 2\n    return result\n  }\n\n  public byte(): number {\n    const result = this.buffer[this.offset]\n    this.offset++\n    return result\n  }\n\n  public int32(): number {\n    const result = this.buffer.readInt32BE(this.offset)\n    this.offset += 4\n    return result\n  }\n\n  public string(length: number): string {\n    const result = this.buffer.toString(this.encoding, this.offset, this.offset + length)\n    this.offset += length\n    return result\n  }\n\n  public cstring(): string {\n    const start = this.offset\n    let end = start\n    while (this.buffer[end++] !== 0) {}\n    this.offset = end\n    return this.buffer.toString(this.encoding, start, end - 1)\n  }\n\n  public bytes(length: number): Buffer {\n    const result = this.buffer.slice(this.offset, this.offset + length)\n    this.offset += length\n    return result\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"001ba91608dc069aeed2aa0c0d3fe6cc19e82f55","contentHash":"8a7785bb731f0ce841ca126bdf5d3dfcbbedc505fd9a359d5c7b0e023fcd21ba"}}